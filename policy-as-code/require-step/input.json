{
    "action": null,
    "date": 1724978678576,
    "metadata": {
      "action": "onsave",
      "principalIdentifier": "UWSCVRQqT76yW_6vFqKgzA",
      "principalType": "USER",
      "projectMetadata": {
        "description": "",
        "identifier": "Power_of_the_Platform",
        "modules": [
          "CD",
          "CI",
          "CV",
          "CF",
          "CE",
          "STO",
          "CHAOS",
          "SRM",
          "IACM",
          "CET",
          "IDP",
          "CODE",
          "SSCA",
          "CORE",
          "PMS",
          "TEMPLATESERVICE",
          "SEI"
        ],
        "name": "Power of the Platform",
        "orgIdentifier": "default",
        "tags": {}
      },
      "roleAssignmentMetadata": [
        {
          "identifier": "role_assignment_odBmggmXd8ZO7zw2n8t0",
          "managedRole": true,
          "managedRoleAssignment": false,
          "resourceGroupIdentifier": "_all_resources_including_child_scopes",
          "resourceGroupName": "All Resources Including Child Scopes",
          "roleIdentifier": "_account_viewer",
          "roleName": "Account Viewer",
          "roleScopeLevel": "account"
        },
        {
          "identifier": "role_assignment_dW9TZEbvRhZ6Vux3kX43",
          "managedRole": true,
          "managedRoleAssignment": false,
          "resourceGroupIdentifier": "_all_resources_including_child_scopes",
          "resourceGroupName": "All Resources Including Child Scopes",
          "roleIdentifier": "_ccm_admin",
          "roleName": "CCM Admin",
          "roleScopeLevel": "account"
        }
      ],
      "timestamp": 1724978678,
      "type": "pipeline",
      "user": {
        "disabled": false,
        "email": "nicolas.acton@harness.io",
        "externallyManaged": false,
        "locked": false,
        "name": "Nicolas Acton",
        "twoFactorAuthenticationEnabled": false,
        "uuid": "UWSCVRQqT76yW_6vFqKgzA"
      },
      "userGroups": [
        {
          "accountIdentifier": "6_vVHzo9Qeu9fXvj-AcbCQ",
          "description": "Harness managed User Group containing all the users in the organization.",
          "externallyManaged": false,
          "harnessManaged": true,
          "identifier": "_organization_all_users",
          "name": "All Organization Users",
          "notificationConfigs": [],
          "orgIdentifier": "default",
          "ssoLinked": false,
          "tags": {},
          "users": [
            "6giTYFuRS0GOBqaz2zN1lA",
            "bs74pmoCQ1igMBmU0649QQ",
            "edzQ5L9kQGq3zEHm6qsQ8Q",
            "kvttbVdFQfGoZVGB2b9UAw",
            "enT3Vb3UTDG5k9JL4sLICQ",
            "kkqk6NrATC6GErGPAO80uQ",
            "Wg1dSTw7TQGF11l4o0ITbA",
            "8dDSkMv_ShGUPktC4OiGZA",
            "8_QDhBCrQyu0kDHq6cFRZw",
            "aZgbtNgrTNWzRZJ0XB7D_Q",
            "1mVV1owTQoak69yO7ksSWg",
            "Vw4E5UNcSDCn2hFz7zeGXg",
            "E6eesWsRRx--zjocv6XKRQ",
            "1xYUJNfQSbuKhjJ5EwIMMQ",
            "Zht2tyLeTuqkMOP90acqcQ",
            "IXYL_X7RQPKVMn8k6TfTow",
            "yITik7NPSKCmZYeapcHp9w",
            "AH4hQB5EQ1iCuATM3jfjLw",
            "Nl2Q4pGgSyCLv-isYEe38A",
            "KVC7BISuTPK8TpcQM-iczg",
            "cxcEVHYzQQ6BzFkNxAzfRg",
            "E4H-OPOVTvyxvG3TLT9UaA",
            "rMQbB-7jSE6yXVOGjW36Lw",
            "hLOPaHIsTnij9gfrt9__UA",
            "qfgTXSlwTNWFaq55Y68zTw",
            "kOZjjMF1TeuX-8qUzefT8Q",
            "DfE7mUIaRhKFALJaIp457Q",
            "lQ8uqntUQUmZoRob-oIbDw",
            "1yinK_EqSiKWfE1mcsg2Dg",
            "xDwJRtiQTmijDOtsqObVow",
            "B24s_h_oRTacNl1b0m92aw",
            "rM4hcOyGS32ugCekqku6lg",
            "1ZST3fxnTieV8uH1847ong",
            "LNH3onsTRKuYJv8SVCqS3A",
            "LSguROn1Rr-AP7RQAekKNg",
            "dfe4FwuyQp66q20Mp1WrzQ",
            "_nljkr8tTliHPq5zHLOf-w",
            "uu_vQEKESTyUJwYE8h3-eA",
            "CR92vauwSB-6NXFSrTwiZg",
            "CGUUSzcRTZWnyJ4V5_JT-w",
            "1NXmXLayQpiZm5HkF372lw",
            "8HaI_2s5TEakX7hIl4cOrQ",
            "Sw4EAhWKSKuWSEA0lv5lUg",
            "4VWfxVrzRS2fzCikMo24Rg",
            "xfXE2s_fTVqFh32FwhBZiw",
            "F6GKHiajTbS7nyxAr6AMGA",
            "VdlMq-n2TMqiG_NiMP5PCQ",
            "gqsvCFyGQU-zIET1tfHYlA",
            "uHXytqLwQkCTxnsydXVghQ",
            "urBVE7OBT2KhEorHtkCm3w",
            "JK7qoTXuQhiGg24sTwA6hg",
            "yW4qP76IS7uQmNrRKRREvg",
            "CTVs4QFKR3Wy-AVsexhorQ",
            "b0DV6rBQSlmcCLkm6Ofp9A",
            "bh2wqeaLTqSc3VX0q69J7w",
            "N7HlQ54BR-KPWE4x1vqyrw",
            "2Y1i5Y4wRPClbiBqTw_YnA",
            "3CrMTpF4QHeAsaPm2d1Xzw",
            "RP0axSh1TJ6bCms6dRye3Q",
            "13LXarpeRt2SJisnRPvsww",
            "gi2VLVSfRSeNCCdNk50Org",
            "nO0-ndY-RXWzAv7gMILchg",
            "UtwELE_kSGWHUbmUW_zGBw",
            "HfSc-xwMSM2atDvK6ymx4g",
            "HkCUgQpeS5-4lgU7GfDleg",
            "-3sWrMRHT4qkPRvEsXnwDA",
            "iZ1i_jErS06ILkveO7Myzg",
            "NUUSR7c-SCuifIhUbxZ_Wg",
            "CYDq4fN_R-2Jh9lPwg9KnA",
            "4a8X79KXRF6LOLrZejwIEw",
            "R9CfaD0OSGqqnEG5qruZ3Q",
            "2e8BGDVIQ_e_awWr20W43A",
            "JbtIF5OVTLCOAFHN7gJhKA",
            "sfr-Tt3lQEGAbi_e8ovSNQ",
            "g_K7imMmTJSvom6ZHH6Ngg",
            "5oseWZiVSPOUGFNibdugGA",
            "nP5rHf3PRVOA1jhZMjgPZw",
            "ssEz84NXTu69zpD2EI7VhA",
            "3PCHqvdoRXWGYiBsLJqx0w",
            "6Kb049ZxR5W7K5Gou-U0fA",
            "LDSWa1Y3SAOtzcHAqW49cA",
            "1EnVVgCRSMuefW6PXhvQkA",
            "MxBhR13DRZyqeg4ts3PGNg",
            "nEKqN0n4RBaX1Gbc1wpb8Q",
            "DlBZhLXGSt2uAvhNrZF_Ug",
            "UWSCVRQqT76yW_6vFqKgzA",
            "duU6PMTyTR-dfm9HqYUQQQ",
            "LZo1q5VbSgSfDZLxQ7OvXw",
            "itQqs5i1QMe6vj4mf-gKEQ",
            "PoykHDKQSiq9CHs-3ixTWw",
            "1J2ZO2YjQVSVq8oXOq4eQQ",
            "QuiEDOsiSzeEda0YByCVug",
            "dCcOTKwaSYaMiYB0_hSDog",
            "nlCVswVjQwyRdBIM6WMyMQ",
            "E3dklkTtRf6cYfR05qWGZg",
            "jr-a--BVTOGaW6zdRxvfYg",
            "FA2HiMNoTCengvhsFUBFzQ",
            "yRFvdokPQ9mVbCM-zCibVw",
            "g8tAeYC4T0mGRTw2z2Y76g",
            "sOnl09UlSYmS_K9nBSjwDQ",
            "QSe979ikSrCt9jOPH09dXw",
            "0xeKhkFtSrilY6-xM9Zzkg",
            "lkP_BSHHSXyoUgpe9KuMnw",
            "TFv3_miyQ9-bjI10V_lTrg",
            "8mDsdFZASbmCSLOkLYQGNQ",
            "4IQ0h44sRvWXf2W4F31dmA",
            "lANPiuQ3T1-6gaPUPbPUAQ",
            "yCZz_UOLRl-t3617aVUhtg",
            "oA6jP5EyRGCttfQ8gJ_-qw",
            "ec9UfvFwTf663F47Hlqxbg",
            "ZGPqhfVJSfOWMr-6OPvtww",
            "KxAzP5tbRUSKVF34dKcmvg",
            "cdC4uz8fQMGIFQM2qw-Uvw",
            "bGKosFFaQI-lgU_RMHnUeQ",
            "0MR8DysRQ6WymBsEb_-t3A",
            "5w-utPzKThiZ-0ER-gG_Lw",
            "egFHNGLuTE-OsZB0vmfbNw",
            "0aaQFBm_R4CGggKpCrXopQ",
            "nWY1xukITHapDDZ3kTieRQ",
            "rStKhgJUTDysC3aGjLnLug",
            "KI4F-i79R3G7VAcrt_kchA",
            "pnE2PgMLSJqGPKRoLkhBYQ"
          ]
        },
        {
          "accountIdentifier": "6_vVHzo9Qeu9fXvj-AcbCQ",
          "description": "",
          "externallyManaged": false,
          "harnessManaged": false,
          "identifier": "Bootcamp_Students",
          "name": "Bootcamp Students",
          "notificationConfigs": [],
          "ssoLinked": false,
          "tags": {},
          "users": [
            "k-ce2dcrSRmBdeSktuNLnw",
            "x_-XrPy-S1-utRCN-gHwmQ",
            "UWSCVRQqT76yW_6vFqKgzA",
            "5dSSS3kCRWusOWv3J0k-tA"
          ]
        },
        {
          "accountIdentifier": "6_vVHzo9Qeu9fXvj-AcbCQ",
          "description": "",
          "externallyManaged": false,
          "harnessManaged": false,
          "identifier": "New_Demo_Group",
          "name": "Sales Engineering and Solution Architects",
          "notificationConfigs": [],
          "ssoLinked": false,
          "tags": {},
          "users": [
            "iuPiDfwsS2a3-y5kbO199w",
            "7-bJHpojRDWSF_atE76LTw",
            "gpN1z9f3RaeY7-p1nJQ53A",
            "nO0-ndY-RXWzAv7gMILchg",
            "TJ-EfgDFSwKmnkFtYBh8BA",
            "Kf09ExlrRk-5_jiCv-PIqQ",
            "wvyAbu-cQx-xYfwSo307Cw",
            "wjgNHpyaS0qUm20pXka4Gg",
            "HfSc-xwMSM2atDvK6ymx4g",
            "Vw4E5UNcSDCn2hFz7zeGXg",
            "HkCUgQpeS5-4lgU7GfDleg",
            "R9CfaD0OSGqqnEG5qruZ3Q",
            "JbtIF5OVTLCOAFHN7gJhKA",
            "IsSz3SGaTA-vMotzqqIm4w",
            "YnqjBxF-Tkq8W6KMC90OMg",
            "cxcEVHYzQQ6BzFkNxAzfRg",
            "5oseWZiVSPOUGFNibdugGA",
            "FZ4I7ofDQfOqmvXZ0MLDZA",
            "1UAATeE5QCKHpACuRR2WpQ",
            "GHr5jaCFR5SeU7eLKx3iOQ",
            "rCs2xwziS6iyPihEfI4uCQ",
            "qfgTXSlwTNWFaq55Y68zTw",
            "DfE7mUIaRhKFALJaIp457Q",
            "4JCQs46YTxKawHSWVW6nLA",
            "ZNM1oeewTVef9rIMVkKx0w",
            "LDSWa1Y3SAOtzcHAqW49cA",
            "1EnVVgCRSMuefW6PXhvQkA",
            "tcwM17o9RcaM-Uzla6Wuvw",
            "h1aAQuL5QQ2grPKGo0ypmA",
            "UWSCVRQqT76yW_6vFqKgzA",
            "njqt22E1T7SsvnqsDwuPJQ",
            "G19tubL_T0C1YD9O4U-rBg",
            "1ZST3fxnTieV8uH1847ong",
            "PoykHDKQSiq9CHs-3ixTWw",
            "dfe4FwuyQp66q20Mp1WrzQ",
            "uu_vQEKESTyUJwYE8h3-eA",
            "dCcOTKwaSYaMiYB0_hSDog",
            "CGUUSzcRTZWnyJ4V5_JT-w",
            "nlCVswVjQwyRdBIM6WMyMQ",
            "xYwRiCohQNyb2eovugAhCw",
            "rStKhgJUTDysC3aGjLnLug",
            "Sw4EAhWKSKuWSEA0lv5lUg",
            "jr-a--BVTOGaW6zdRxvfYg",
            "FA2HiMNoTCengvhsFUBFzQ",
            "urBVE7OBT2KhEorHtkCm3w",
            "0xeKhkFtSrilY6-xM9Zzkg",
            "8mDsdFZASbmCSLOkLYQGNQ",
            "eRRJ0oHaRpGMAPHiVTr2FQ",
            "4IQ0h44sRvWXf2W4F31dmA",
            "dsdClicqSP-DN0uFhUfdIA",
            "4rRgoLk9STmB7ZdUg4tsQw",
            "CTVs4QFKR3Wy-AVsexhorQ",
            "b0DV6rBQSlmcCLkm6Ofp9A",
            "N7HlQ54BR-KPWE4x1vqyrw",
            "yCZz_UOLRl-t3617aVUhtg"
          ]
        },
        {
          "accountIdentifier": "6_vVHzo9Qeu9fXvj-AcbCQ",
          "description": "Harness managed User Group containing all the users in the account.",
          "externallyManaged": false,
          "harnessManaged": true,
          "identifier": "_account_all_users",
          "name": "All Account Users",
          "notificationConfigs": [],
          "ssoLinked": false,
          "tags": {},
          "users": [
            "kvttbVdFQfGoZVGB2b9UAw",
            "3i02xYF9SPiXa0Y2qdbh5g",
            "0G5ClQwyQ7imIwWiuYclzw",
            "24GcX3y4SROt1pUpH-Lm_Q",
            "2GOF6DjCQaiiF-5NvdVSOg",
            "W-TBeoxtSjCodKZf5BgqWg",
            "kkqk6NrATC6GErGPAO80uQ",
            "Wg1dSTw7TQGF11l4o0ITbA",
            "-U6F1j2dS2qhlxyIu1dB1Q",
            "aOqcMa_oR9G5dMZBjRnT5w",
            "8_QDhBCrQyu0kDHq6cFRZw",
            "U-XwL4GvR4a72AsRTkz6uw",
            "-sXnv6w3Teu5RHZrFzcODA",
            "1xYUJNfQSbuKhjJ5EwIMMQ",
            "pRLYKsWMT1Wl5iiZYsQ7Lw",
            "IXYL_X7RQPKVMn8k6TfTow",
            "_V8RzsSXRmuUoXb-xYUAFQ",
            "sPrckvuzTz6CyT2JEgE0Xw",
            "TbUecwHCSzqZhuhQQnMPhg",
            "PB2Dk2A_QdW3qyhBNVKoVQ",
            "yITik7NPSKCmZYeapcHp9w",
            "SGQf1qSPQDy_UtpwgmQWzA",
            "smORQszTQNuao9-q-AVeCQ",
            "E4H-OPOVTvyxvG3TLT9UaA",
            "rMQbB-7jSE6yXVOGjW36Lw",
            "1InfB-tkQL2_3OeL9SW3cw",
            "qfgTXSlwTNWFaq55Y68zTw",
            "3biPQmU9TIyGNsmZgANv-w",
            "WigesNBoS_S7SpprO4MEKQ",
            "kOZjjMF1TeuX-8qUzefT8Q",
            "DfE7mUIaRhKFALJaIp457Q",
            "lQ8uqntUQUmZoRob-oIbDw",
            "x_-XrPy-S1-utRCN-gHwmQ",
            "4JCQs46YTxKawHSWVW6nLA",
            "jaJTYnBUScOVuqJ87B6_5Q",
            "U-M3D2gmSIazHuEFXk02Mg",
            "1yinK_EqSiKWfE1mcsg2Dg",
            "xDwJRtiQTmijDOtsqObVow",
            "FueyZ4UUSF2ymaud0Sj4GA",
            "QRq06c8zTpmaZtCvV10E6w",
            "mEGfsHMpRQCUbXBwtqOSsg",
            "G19tubL_T0C1YD9O4U-rBg",
            "1ZST3fxnTieV8uH1847ong",
            "LNH3onsTRKuYJv8SVCqS3A",
            "w36o5gDWSLi3oV0OCw2dLg",
            "LSguROn1Rr-AP7RQAekKNg",
            "dfe4FwuyQp66q20Mp1WrzQ",
            "_nljkr8tTliHPq5zHLOf-w",
            "Oa_UaRH5TnWVOAfbTCyj3w",
            "CR92vauwSB-6NXFSrTwiZg",
            "gFcGslw4QcuFRbEoildegg",
            "xZHynz5xSJKi0q4enbd5Nw",
            "8HaI_2s5TEakX7hIl4cOrQ",
            "5Nf_JeNZThCZok_8argEDA",
            "4VWfxVrzRS2fzCikMo24Rg",
            "xfXE2s_fTVqFh32FwhBZiw",
            "F6GKHiajTbS7nyxAr6AMGA",
            "VdlMq-n2TMqiG_NiMP5PCQ",
            "uHXytqLwQkCTxnsydXVghQ",
            "urBVE7OBT2KhEorHtkCm3w",
            "Q9LJt9k8TsGcxsUtV0OtPg",
            "yW4qP76IS7uQmNrRKRREvg",
            "gBS58DL4QOmDyWP8MeL3Iw",
            "_1UMO2FtQQev8Un2iiY7Ow",
            "CTVs4QFKR3Wy-AVsexhorQ",
            "ZcK3M-n2SwyyBTi57gYl1Q",
            "Hv2Uo_4lSkqgj60Q6lNkXg",
            "3CrMTpF4QHeAsaPm2d1Xzw",
            "Z9F9BZsHSIaXGblWqjtwTw",
            "RP0axSh1TJ6bCms6dRye3Q",
            "13LXarpeRt2SJisnRPvsww",
            "WI97aKeZSF62127iwFx3uA",
            "gi2VLVSfRSeNCCdNk50Org",
            "nO0-ndY-RXWzAv7gMILchg",
            "rrxSWpCRTb-hmRzpWS360g",
            "8gyWH1v1SqaV5oCm2sze0A",
            "mibEZPPyRuKDhztDYmfKuw",
            "ZTQdIsi5Tium7pqpi5kKXg",
            "kv7yxtKXQV2brHsy2siaCw",
            "NIplx8yAQJaOoD2ONBnkPQ",
            "HfSc-xwMSM2atDvK6ymx4g",
            "gb4wm2hHTYyVeN46BQ8yNQ",
            "-WU0VxnzQZmBpgxEAOqWzw",
            "4a8X79KXRF6LOLrZejwIEw",
            "2e8BGDVIQ_e_awWr20W43A",
            "uqX1f_DUQa-D0hnkVQi0Iw",
            "sfr-Tt3lQEGAbi_e8ovSNQ",
            "73mvfGXnShWNiBozb_WC-g",
            "XLk1l7seSOSg8aKMbA_nxw",
            "2C692udZRZeGChag6NJIiA",
            "kwz4b83STbq1Os_HIU-o9A",
            "nP5rHf3PRVOA1jhZMjgPZw",
            "1UAATeE5QCKHpACuRR2WpQ",
            "ssEz84NXTu69zpD2EI7VhA",
            "Gc3heM-wRgaXAXOgxH57pQ",
            "SnXSAxPuQOCPN7b0NHdD2g",
            "k-ce2dcrSRmBdeSktuNLnw",
            "riIB77oWTYWViY24Ns-J1w",
            "o9l4M5k0T-S900KfW-wWxg",
            "5go5bOKuRMeEnzKdHaRaaw",
            "UObU4YJTS-ixvOCrrlJwSA",
            "1EnVVgCRSMuefW6PXhvQkA",
            "nEKqN0n4RBaX1Gbc1wpb8Q",
            "2-K-_jb2Sgar7lKimHHWSw",
            "85DtkSdCR9K7uqbqZZd_CA",
            "UWSCVRQqT76yW_6vFqKgzA",
            "duU6PMTyTR-dfm9HqYUQQQ",
            "bT6AOZhCQTe9qwUxlGwRAA",
            "h1aAQuL5QQ2grPKGo0ypmA",
            "vutX5sKsSm-l1ZCULvc_mA",
            "u7Qq8LJERvWs8zLWExGbgg",
            "1J2ZO2YjQVSVq8oXOq4eQQ",
            "QuiEDOsiSzeEda0YByCVug",
            "Jnw-qGhRRqG_5HQSEieQbA",
            "dCcOTKwaSYaMiYB0_hSDog",
            "9Mj5-ZOVTFG4TSQ9BGJBLg",
            "yi-ynUbcShSce3i-EBDaww",
            "jr-a--BVTOGaW6zdRxvfYg",
            "86G3_MAqQomT-QHA9K2PzQ",
            "zkY3WXc9SzSlODpx8_BU0g",
            "yRFvdokPQ9mVbCM-zCibVw",
            "qQZ1MbeZQ86128ivXNo5gQ",
            "VlZxhUUMRWKSpA8ZmZ2Crw",
            "0xeKhkFtSrilY6-xM9Zzkg",
            "lkP_BSHHSXyoUgpe9KuMnw",
            "Jt8Bh0PkR0ecpORCqQYEhQ",
            "TFv3_miyQ9-bjI10V_lTrg",
            "4IQ0h44sRvWXf2W4F31dmA",
            "4rRgoLk9STmB7ZdUg4tsQw",
            "q22Y3DJ2SU2liynFcnVcow",
            "6giTYFuRS0GOBqaz2zN1lA",
            "bs74pmoCQ1igMBmU0649QQ",
            "igajnwsSTpiVbZ1r1H0SBg",
            "edzQ5L9kQGq3zEHm6qsQ8Q",
            "uLM6NUbqRZWHrYukoJxQVg",
            "zhXnd-BQQa2A_SNCoWKyZw",
            "gpN1z9f3RaeY7-p1nJQ53A",
            "YdlCHwfwReyH4hPfsgGjUg",
            "R5U0rXPPSmyJxl3W9Rq2Ag",
            "t2Y4gkYhSbKgx-GzIUQOGw",
            "enT3Vb3UTDG5k9JL4sLICQ",
            "5dSSS3kCRWusOWv3J0k-tA",
            "8dDSkMv_ShGUPktC4OiGZA",
            "3ldfKMRJSgCQlhKJXlAxhg",
            "HSvbUULjTdGfAfvZcH-dkg",
            "aZgbtNgrTNWzRZJ0XB7D_Q",
            "1mVV1owTQoak69yO7ksSWg",
            "wjgNHpyaS0qUm20pXka4Gg",
            "bzHWcXsvQg65HZ5JxLWr9A",
            "Vw4E5UNcSDCn2hFz7zeGXg",
            "E6eesWsRRx--zjocv6XKRQ",
            "auqs09sSSKqsexRvbqaviA",
            "Zht2tyLeTuqkMOP90acqcQ",
            "a0VTPy6AQOmKTcIV5b8LvA",
            "wuiqXmRaRi-2fX03nqabUA",
            "AH4hQB5EQ1iCuATM3jfjLw",
            "20zoQvCuQaWT-17aOvdEGw",
            "Nl2Q4pGgSyCLv-isYEe38A",
            "mcpbu_FnTiiBVfhUxfWFJQ",
            "iSrapsu3QRaEf2DSz-rtLQ",
            "KVC7BISuTPK8TpcQM-iczg",
            "cxcEVHYzQQ6BzFkNxAzfRg",
            "K3wW7pAQSzSbX4V-DBKDDA",
            "hLOPaHIsTnij9gfrt9__UA",
            "Z2r2KqDaQiClShePiNDT9A",
            "zICbR_gZSEuFGPleVorNTg",
            "arE4aB5uQoGqKpxfecKZFQ",
            "feU4fUSKSk25JxRktz2eRQ",
            "lKBDyToLSbyznwijuyEiLQ",
            "jPiaNR4jTiulxPo4QstbEg",
            "qKYZyRMBR6mFGAbZq8HPjg",
            "B24s_h_oRTacNl1b0m92aw",
            "rM4hcOyGS32ugCekqku6lg",
            "86Def46VRNiwIOC5JmK4-Q",
            "0rZP2rm3TP6Zsky5QdIk_Q",
            "jovT4zDjT8SPBI4FplGoEg",
            "5jDJTq4bTauzb8PPggsNhg",
            "uu_vQEKESTyUJwYE8h3-eA",
            "CGUUSzcRTZWnyJ4V5_JT-w",
            "4g8tEzNzSCOrlBsRZK1_Gw",
            "1NXmXLayQpiZm5HkF372lw",
            "Sw4EAhWKSKuWSEA0lv5lUg",
            "gqsvCFyGQU-zIET1tfHYlA",
            "KWshbHvLQm-VCpgZs5RhGA",
            "JK7qoTXuQhiGg24sTwA6hg",
            "eRRJ0oHaRpGMAPHiVTr2FQ",
            "bVtMuC17RWmXOp87hqnPng",
            "9ZrZ4KQ1ReCnwGbHoe2nzA",
            "kKNlTKRgQpCtX9RgY5So2w",
            "z5GoSkh0Sbe8OxJbAnGLIQ",
            "b0DV6rBQSlmcCLkm6Ofp9A",
            "N7HlQ54BR-KPWE4x1vqyrw",
            "bh2wqeaLTqSc3VX0q69J7w",
            "2Y1i5Y4wRPClbiBqTw_YnA",
            "VltlxmB3Rrici-Y8fb2Aeg",
            "7-bJHpojRDWSF_atE76LTw",
            "cSfoOCL4TdKnOiKKhO2mgw",
            "rcPP6lHaSGSZdPpBJbFCpw",
            "UtwELE_kSGWHUbmUW_zGBw",
            "wvyAbu-cQx-xYfwSo307Cw",
            "HkCUgQpeS5-4lgU7GfDleg",
            "7fqanvcKTSmAXFLces32vQ",
            "-3sWrMRHT4qkPRvEsXnwDA",
            "iZ1i_jErS06ILkveO7Myzg",
            "8u19MaYmQ0KEtzIFe-B0Pw",
            "3v2TDj7RSxiIUYQ847zOmA",
            "NUUSR7c-SCuifIhUbxZ_Wg",
            "CYDq4fN_R-2Jh9lPwg9KnA",
            "R9CfaD0OSGqqnEG5qruZ3Q",
            "p0fTAXbaRBacPAnbiJ8paw",
            "WEcab4HQQhaRRw347sJsfA",
            "oFkyeKNuSfCyLWzJvAjF2A",
            "QT2QfT8JRh-uCx2yakENAA",
            "JbtIF5OVTLCOAFHN7gJhKA",
            "g_K7imMmTJSvom6ZHH6Ngg",
            "5oseWZiVSPOUGFNibdugGA",
            "vUwqLhopRJii-oQac_FG3A",
            "OvgRB2cRTlOBuRsMHoWObg",
            "3PCHqvdoRXWGYiBsLJqx0w",
            "6Kb049ZxR5W7K5Gou-U0fA",
            "LDSWa1Y3SAOtzcHAqW49cA",
            "mgmPi1CFTUqb_p0LidKELA",
            "eOPrcrgkRF6oeClfpu0z9Q",
            "MxBhR13DRZyqeg4ts3PGNg",
            "PPlQyzXPR2GtmGWfWqCx2A",
            "DlBZhLXGSt2uAvhNrZF_Ug",
            "6mM0Ku_iTJGoO_rj6sp1Zw",
            "hC4XkjmgRluY4Bx9pGcDmg",
            "xEc99FajQsWOkvlKZU7rhg",
            "LZo1q5VbSgSfDZLxQ7OvXw",
            "PXLpBpOzQpaKJPPOYvjmLg",
            "9_NfsppKTwewkYw9iDT0Vw",
            "itQqs5i1QMe6vj4mf-gKEQ",
            "PoykHDKQSiq9CHs-3ixTWw",
            "I_KgYjZKRcekLEB5NIFRaQ",
            "nlCVswVjQwyRdBIM6WMyMQ",
            "mO8XQ6lCTV2oZku-Zxn55Q",
            "E3dklkTtRf6cYfR05qWGZg",
            "FA2HiMNoTCengvhsFUBFzQ",
            "g8tAeYC4T0mGRTw2z2Y76g",
            "sOnl09UlSYmS_K9nBSjwDQ",
            "QSe979ikSrCt9jOPH09dXw",
            "8mDsdFZASbmCSLOkLYQGNQ",
            "vTnnj85vS0qPXEMutgMMOg",
            "ZXCRjiXQTgi50RGF2H9k1g",
            "lANPiuQ3T1-6gaPUPbPUAQ",
            "yCZz_UOLRl-t3617aVUhtg",
            "8oSkOrIISoWN5cVyE5bnyQ",
            "YRis6r05RDmIvaAdnHlrLw",
            "oA6jP5EyRGCttfQ8gJ_-qw",
            "eroEq0jBRVebOiqFsE0xNg",
            "dsdClicqSP-DN0uFhUfdIA",
            "GHr5jaCFR5SeU7eLKx3iOQ",
            "sNmGcjOpREuKbcmkZHMr2Q",
            "Kf09ExlrRk-5_jiCv-PIqQ",
            "xYwRiCohQNyb2eovugAhCw",
            "rRA4R2rBS26qWWInOE1mxA",
            "A2Q3iPRXSaCmtlqiB-D7PA",
            "6yyh8EJfRkCIXXZ84x4wxA",
            "QtCy1tW-RJuzZ1LhB-3W_Q",
            "ec9UfvFwTf663F47Hlqxbg",
            "ZGPqhfVJSfOWMr-6OPvtww",
            "R8FHYZP6Qka53qC-FRRGwg",
            "Pl3cBRuLTb6jGHqiZ3dBXQ",
            "Ph2znxq-SWilj3zz2uSZvg",
            "rStKhgJUTDysC3aGjLnLug",
            "FZ4I7ofDQfOqmvXZ0MLDZA",
            "uS112yNwTOyuc3diuHtrSA",
            "QIRrt0sYSu6HhOfJd_902Q",
            "njqt22E1T7SsvnqsDwuPJQ",
            "xviQGSegSIGIbyP7Gtt32g",
            "KxAzP5tbRUSKVF34dKcmvg",
            "iuPiDfwsS2a3-y5kbO199w",
            "UqQUvHlZT7mwfkAXV-uwEg",
            "TJ-EfgDFSwKmnkFtYBh8BA",
            "h4CCA0dPTESgJPM05AdjhQ",
            "B6Wu58JsTNKIyGIglewYUQ",
            "di4T0a5JS0a_KobvgH_dtw",
            "ETm2wBixQeSKxeky_9KQLA",
            "I725N9BTSiC1U3Muqv4ZSQ",
            "K3TLvzTzRhCVUfs3JL8O7A",
            "cdC4uz8fQMGIFQM2qw-Uvw",
            "rCs2xwziS6iyPihEfI4uCQ",
            "-0gtRUCsQZG5dYz-quqvrg",
            "YnqjBxF-Tkq8W6KMC90OMg",
            "bGKosFFaQI-lgU_RMHnUeQ",
            "0MR8DysRQ6WymBsEb_-t3A",
            "SUV9KRe7R1SIpq0QsXgE5w",
            "5w-utPzKThiZ-0ER-gG_Lw",
            "IsSz3SGaTA-vMotzqqIm4w",
            "wAH9oBUgQ5u3c5jlSCuhkA",
            "38NPPnm-QSC15mebCJNnYg",
            "6zkqpMgMR_qqZzwszSQzWQ",
            "qT1BJHM5RM6mFMkH5dHdbg",
            "2lxnixu3R1ijXh0WQorCBg",
            "BmYtrLRQRR6qmqr262R0iQ",
            "opt4oEXZQRKhlw6AWeBFqA",
            "egFHNGLuTE-OsZB0vmfbNw",
            "0aaQFBm_R4CGggKpCrXopQ",
            "nWY1xukITHapDDZ3kTieRQ",
            "AgG-NSaIT3udKGE-I7tiyg",
            "uaFHa8QDRryjNkvQQWnLzw",
            "rc4KzX1lQb24IbBNsGMhGA",
            "iMAIyp8fTi2e0a_OeYek6A",
            "tcwM17o9RcaM-Uzla6Wuvw",
            "ZNM1oeewTVef9rIMVkKx0w",
            "f6BD-sfrTtGqW_9p82WYIg",
            "Jqw5tfJhQ92yHtIRHt_qxQ",
            "589QDWIqTDOyHBbmHKwESA",
            "7Ww9sAHsQ4yI5rmtlIdeXQ",
            "Nq_lZanwQdqFU25fA_wfkg",
            "KI4F-i79R3G7VAcrt_kchA",
            "-x7wwIN2ShK3A5P75ANP6Q",
            "pnE2PgMLSJqGPKRoLkhBYQ",
            "XsCcL9WnQQOCyOpQfVHu2A",
            "Gps6trHOSGOc-aze5MB3Cg"
          ]
        }
      ]
    },
    "pipeline": {
      "allowStageExecutions": true,
      "gitConfig": {
        "branch": "main",
        "filePath": ".harness/pipeline.yaml",
        "repoName": "Pipelines"
      },
      "identifier": "POP_Pipeline",
      "name": "POP Pipeline",
      "orgIdentifier": "default",
      "projectIdentifier": "Power_of_the_Platform",
      "properties": {
        "ci": {
          "codebase": {
            "build": "<+input>",
            "repoName": "Boutique_Application",
            "sparseCheckout": []
          }
        }
      },
      "stages": [
        {
          "stage": {
            "description": "",
            "identifier": "Build_Test_Push",
            "name": "Build - Test - Push",
            "spec": {
              "caching": {
                "enabled": true,
                "paths": []
              },
              "cloneCodebase": true,
              "execution": {
                "steps": [
                  {
                    "stepGroup": {
                      "identifier": "SCA",
                      "name": "SCA",
                      "steps": [
                        {
                          "parallel": [
                            {
                              "step": {
                                "failureStrategies": [
                                  {
                                    "onFailure": {
                                      "action": {
                                        "type": "MarkAsSuccess"
                                      },
                                      "errors": [
                                        "AllErrors"
                                      ]
                                    }
                                  }
                                ],
                                "identifier": "BlackDuck",
                                "name": "BlackDuck",
                                "spec": {
                                  "advanced": {
                                    "log": {
                                      "level": "info"
                                    }
                                  },
                                  "config": "default",
                                  "ingestion": {
                                    "file": "sto_tests/scan_tools/blackduckhub/test_data/001"
                                  },
                                  "mode": "ingestion",
                                  "target": {
                                    "detection": "manual",
                                    "name": "dmontanez/boutique-pmservice",
                                    "type": "repository",
                                    "variant": "active_cves_<+pipeline.sequenceId>"
                                  }
                                },
                                "type": "BlackDuck",
                                "when": {
                                  "condition": "<+codebase.sourceBranch>=~ \".*-patch.*\" || <+pipeline.variables.devonly> == \"false\"",
                                  "stageStatus": "Success"
                                }
                              }
                            },
                            {
                              "step": {
                                "identifier": "Snyk_SCA",
                                "name": "Snyk SCA",
                                "spec": {
                                  "advanced": {
                                    "log": {
                                      "level": "info"
                                    }
                                  },
                                  "config": "default",
                                  "ingestion": {
                                    "file": "sto_tests/scan_tools/snyk/test_data/002"
                                  },
                                  "mode": "ingestion",
                                  "target": {
                                    "detection": "manual",
                                    "name": "dmontanez/boutique-pmservice",
                                    "type": "repository",
                                    "variant": "main"
                                  }
                                },
                                "type": "Snyk"
                              }
                            }
                          ]
                        }
                      ],
                      "when": {
                        "condition": "<+stage.name>=~\".*_0.*\"",
                        "stageStatus": "Success"
                      }
                    }
                  },
                  {
                    "step": {
                      "identifier": "Build_Gradle_App",
                      "name": "Build Gradle App",
                      "spec": {
                        "command": "#gradle build --build-cache -x test -x rat -Dgradle.user.home=/harness/.gradle\ngradle build --build-cache -x test -x rat -PmaxParallelForks=32 -PignoreFailures=true --profile\n\n\ntouch release-notes.txt",
                        "shell": "Sh"
                      },
                      "type": "Run",
                      "when": {
                        "condition": "<+stage.name>=~\".*_0.*\"",
                        "stageStatus": "Success"
                      }
                    }
                  },
                  {
                    "step": {
                      "identifier": "Test_Intelligence",
                      "name": "Test Intelligence",
                      "spec": {
                        "command": "gradle --build-cache unitTest -PmaxParallelForks=32 -PignoreFailures=true --profile\n\n",
                        "intelligenceMode": true,
                        "reports": {
                          "spec": {
                            "paths": [
                              "**/*.xml"
                            ]
                          },
                          "type": "JUnit"
                        },
                        "shell": "Sh"
                      },
                      "type": "Test"
                    }
                  },
                  {
                    "stepGroup": {
                      "failureStrategies": [],
                      "identifier": "SAST",
                      "name": "SAST",
                      "steps": [
                        {
                          "parallel": [
                            {
                              "step": {
                                "failureStrategies": [
                                  {
                                    "onFailure": {
                                      "action": {
                                        "type": "MarkAsSuccess"
                                      },
                                      "errors": [
                                        "AllErrors"
                                      ]
                                    }
                                  }
                                ],
                                "identifier": "Snyk_SAST",
                                "name": "Snyk SAST",
                                "spec": {
                                  "advanced": {
                                    "fail_on_severity": "none",
                                    "log": {
                                      "level": "info"
                                    }
                                  },
                                  "config": "default",
                                  "ingestion": {
                                    "file": "sto_tests/scan_tools/snyk/test_data/001"
                                  },
                                  "mode": "ingestion",
                                  "target": {
                                    "name": "dmontanez/boutique-pmservice",
                                    "type": "repository",
                                    "variant": "main"
                                  }
                                },
                                "type": "Snyk"
                              }
                            },
                            {
                              "step": {
                                "failureStrategies": [
                                  {
                                    "onFailure": {
                                      "action": {
                                        "type": "Ignore"
                                      },
                                      "errors": [
                                        "AllErrors"
                                      ]
                                    }
                                  }
                                ],
                                "identifier": "SonarQube_SAST",
                                "name": "SonarQube SAST",
                                "spec": {
                                  "advanced": {
                                    "log": {
                                      "level": "info"
                                    }
                                  },
                                  "config": "default",
                                  "ingestion": {
                                    "file": "sto_tests/scan_tools/sonarqube/test_data/001"
                                  },
                                  "mode": "ingestion",
                                  "target": {
                                    "name": "dmontanez/boutique-pmservice",
                                    "type": "repository",
                                    "variant": "main"
                                  }
                                },
                                "type": "Sonarqube"
                              }
                            },
                            {
                              "step": {
                                "identifier": "Wiz",
                                "name": "Wiz",
                                "spec": {
                                  "advanced": {
                                    "log": {
                                      "level": "info"
                                    }
                                  },
                                  "auth": {
                                    "access_id": "<+secrets.getValue(\"account.wiz_access_id\")>",
                                    "access_token": "<+secrets.getValue(\"account.wiz_access_token\")>"
                                  },
                                  "config": "wiz-directory",
                                  "mode": "orchestration",
                                  "target": {
                                    "detection": "auto",
                                    "type": "repository"
                                  }
                                },
                                "type": "Wiz"
                              }
                            }
                          ]
                        }
                      ],
                      "when": {
                        "condition": "<+stage.name>=~\".*_0.*\"",
                        "stageStatus": "Success"
                      }
                    }
                  },
                  {
                    "step": {
                      "failureStrategies": [
                        {
                          "onFailure": {
                            "action": {
                              "type": "MarkAsFailure"
                            },
                            "errors": [
                              "AllErrors"
                            ]
                          }
                        }
                      ],
                      "identifier": "Build_and_push_image_to_DockerHub",
                      "name": "Push Artifact",
                      "spec": {
                        "caching": true,
                        "connector": {
                          "accountIdentifier": "6_vVHzo9Qeu9fXvj-AcbCQ",
                          "description": "",
                          "identifier": "Enterprise_Dockerhub_Production",
                          "name": "Enterprise Dockerhub - Production",
                          "orgIdentifier": "default",
                          "projectIdentifier": "Power_of_the_Platform",
                          "spec": {
                            "auth": {
                              "spec": {
                                "passwordRef": "Enterprise_Docker",
                                "username": "chrisjws"
                              },
                              "type": "UsernamePassword"
                            },
                            "delegateSelectors": [],
                            "dockerRegistryUrl": "https://index.docker.io/v1/",
                            "executeOnDelegate": false,
                            "providerType": "DockerHub",
                            "proxy": false
                          },
                          "tags": {},
                          "type": "DockerRegistry"
                        },
                        "optimize": true,
                        "remoteCacheRepo": "chrisjws/jhttp_cache_repo",
                        "repo": "chrisjws/kafka-test",
                        "resources": {
                          "limits": {
                            "cpu": "1",
                            "memory": "1000Mi"
                          }
                        },
                        "tags": [
                          "1.<+pipeline.sequenceId>"
                        ]
                      },
                      "type": "BuildAndPushDockerRegistry",
                      "when": {
                        "condition": "<+stage.name>=~\".*_0.*\"",
                        "stageStatus": "Success"
                      }
                    }
                  },
                  {
                    "parallel": [
                      {
                        "step": {
                          "identifier": "SBOM_Generation",
                          "name": "SBOM Generation",
                          "spec": {
                            "mode": "generation",
                            "resources": {
                              "limits": {
                                "cpu": "0.5",
                                "memory": "500Mi"
                              }
                            },
                            "sbom_drift": {
                              "base": "last_generated_sbom"
                            },
                            "source": {
                              "spec": {
                                "connector": "Enterprise_Dockerhub_Production",
                                "image": "chrisjws/kafka-test:1.<+pipeline.sequenceId>"
                              },
                              "type": "docker"
                            },
                            "tool": {
                              "spec": {
                                "format": "spdx-json"
                              },
                              "type": "Syft"
                            }
                          },
                          "type": "SscaOrchestration",
                          "when": {
                            "condition": "<+stage.name>=~\".*_0.*\"",
                            "stageStatus": "Success"
                          }
                        }
                      },
                      {
                        "step": {
                          "identifier": "Publish_Release_Notes",
                          "name": "Publish Release Notes",
                          "spec": {
                            "connector": {
                              "accountIdentifier": "6_vVHzo9Qeu9fXvj-AcbCQ",
                              "description": "",
                              "identifier": "Enterprise_Dockerhub_Production",
                              "name": "Enterprise Dockerhub - Production",
                              "orgIdentifier": "default",
                              "projectIdentifier": "Power_of_the_Platform",
                              "spec": {
                                "auth": {
                                  "spec": {
                                    "passwordRef": "Enterprise_Docker",
                                    "username": "chrisjws"
                                  },
                                  "type": "UsernamePassword"
                                },
                                "delegateSelectors": [],
                                "dockerRegistryUrl": "https://index.docker.io/v1/",
                                "executeOnDelegate": false,
                                "providerType": "DockerHub",
                                "proxy": false
                              },
                              "tags": {},
                              "type": "DockerRegistry"
                            },
                            "image": "plugins/artifact-metadata-publisher",
                            "settings": {
                              "artifact_file": "release-notes.txt",
                              "file_urls": "https://harness.io/notes.html"
                            }
                          },
                          "type": "Plugin"
                        }
                      }
                    ]
                  },
                  {
                    "stepGroup": {
                      "failureStrategies": [],
                      "identifier": "Image_Scan",
                      "name": "Image Scan",
                      "spec": {},
                      "steps": [
                        {
                          "parallel": [
                            {
                              "step": {
                                "identifier": "JFrog_Xray",
                                "name": "JFrog Xray",
                                "spec": {
                                  "privileged": true,
                                  "settings": {
                                    "container_project": "dmontanez/boutique-pmservice",
                                    "container_tag": "1.18",
                                    "customer_artifacts_path": "sto_tests/scan_tools/xray/test_data",
                                    "manual_upload_filename": "001",
                                    "policy_type": "ingestionOnly",
                                    "product_config_name": "default",
                                    "product_name": "xray",
                                    "scan_type": "containerImage"
                                  }
                                },
                                "type": "Security",
                                "when": {
                                  "condition": "<+codebase.sourceBranch>=~ \".*-patch.*\" || <+pipeline.variables.devonly> == \"false\"",
                                  "stageStatus": "Success"
                                }
                              }
                            },
                            {
                              "step": {
                                "failureStrategies": [
                                  {
                                    "onFailure": {
                                      "action": {
                                        "type": "Ignore"
                                      },
                                      "errors": [
                                        "AllErrors"
                                      ]
                                    }
                                  }
                                ],
                                "identifier": "Aqua_Trivy",
                                "name": "Aqua Trivy",
                                "spec": {
                                  "advanced": {
                                    "log": {
                                      "level": "info"
                                    }
                                  },
                                  "config": "default",
                                  "ingestion": {
                                    "file": "sto_tests/scan_tools/aqua_trivy/test_data/005"
                                  },
                                  "mode": "ingestion",
                                  "privileged": false,
                                  "target": {
                                    "name": "dmontanez/boutique-pmservice",
                                    "type": "container",
                                    "variant": "local"
                                  }
                                },
                                "type": "AquaTrivy"
                              }
                            },
                            {
                              "step": {
                                "identifier": "Wiz_Container",
                                "name": "Wiz - Container",
                                "spec": {
                                  "advanced": {
                                    "log": {
                                      "level": "info"
                                    }
                                  },
                                  "auth": {
                                    "access_id": "<+secrets.getValue(\"account.wiz_access_id\")>",
                                    "access_token": "<+secrets.getValue(\"account.wiz_access_token\")>"
                                  },
                                  "config": "wiz-container-images",
                                  "image": {
                                    "name": "chrisjws/kafka-test",
                                    "tag": "1.<+pipeline.sequenceId>",
                                    "type": "docker_v2"
                                  },
                                  "mode": "orchestration",
                                  "privileged": true,
                                  "target": {
                                    "detection": "auto",
                                    "type": "container"
                                  }
                                },
                                "type": "Wiz",
                                "when": {
                                  "stageStatus": "Success"
                                }
                              }
                            }
                          ]
                        }
                      ],
                      "when": {
                        "condition": "<+stage.name>=~\".*_0.*\"",
                        "stageStatus": "Success"
                      }
                    }
                  },
                  {
                    "step": {
                      "identifier": "PR_Status_Updates",
                      "name": "PR Status Checks",
                      "spec": {
                        "command": "##SAST Status Check\ncurl -i -X PUT \\\n  'https://app.harness.io/gateway/code/api/v1/repos/e2e-commercial-hosted/+/checks/commits/<+codebase.commitSha>?accountIdentifier=6_vVHzo9Qeu9fXvj-AcbCQ&orgIdentifier=default&projectIdentifier=Platform_Demo' \\\n  -H 'Content-Type: application/json' \\\n  -H 'x-api-key: <+secrets.getValue(\"sat_harnesscode_access\")>' \\\n  -d '{\n    \"ended\": 0,\n    \"identifier\": \"harness-ci-sastscans\",\n    \"link\": \"https://app.harness.io/ng/account/6_vVHzo9Qeu9fXvj-AcbCQ/module/cd/orgs/default/projects/Platform_Demo/pipelines/End_to_End_Hosted_Gitness/executions/<+pipeline.executionId>/security\",\n    \"payload\": {\n      \"data\": null,\n      \"kind\": \"\",\n      \"version\": \"1.0\"\n    },\n    \"started\": 0,\n    \"status\": \"success\",\n    \"summary\": \"Snyk SAST and SonarQube SAST gates\"\n  }'\n\n##ImageScan Status Check\ncurl -i -X PUT \\\n  'https://app.harness.io/gateway/code/api/v1/repos/e2e-commercial-hosted/+/checks/commits/<+codebase.commitSha>?accountIdentifier=6_vVHzo9Qeu9fXvj-AcbCQ&orgIdentifier=default&projectIdentifier=Platform_Demo' \\\n  -H 'Content-Type: application/json' \\\n  -H 'x-api-key: <+secrets.getValue(\"sat_harnesscode_access\")>' \\\n  -d '{\n    \"ended\": 0,\n    \"identifier\": \"harness-ci-imagescans\",\n    \"link\": \"https://app.harness.io/ng/account/6_vVHzo9Qeu9fXvj-AcbCQ/module/cd/orgs/default/projects/Platform_Demo/pipelines/End_to_End_Hosted_Gitness/executions/<+pipeline.executionId>/security\",\n    \"payload\": {\n      \"data\": null,\n      \"kind\": \"\",\n      \"version\": \"1.0\"\n    },\n    \"started\": 0,\n    \"status\": \"success\",\n    \"summary\": \"Aqua Trivy and JFrog Xray gates\"\n    }'\n\n\n##SCA Status Check\ncurl -i -X PUT \\\n  'https://app.harness.io/gateway/code/api/v1/repos/e2e-commercial-hosted/+/checks/commits/<+codebase.commitSha>?accountIdentifier=6_vVHzo9Qeu9fXvj-AcbCQ&orgIdentifier=default&projectIdentifier=Platform_Demo' \\\n  -H 'Content-Type: application/json' \\\n  -H 'x-api-key: <+secrets.getValue(\"sat_harnesscode_access\")>' \\\n  -d '{\n    \"ended\": 0,\n    \"identifier\": \"harness-ci-sca\",\n    \"link\": \"https://app.harness.io/ng/account/6_vVHzo9Qeu9fXvj-AcbCQ/module/cd/orgs/default/projects/Platform_Demo/pipelines/End_to_End_Hosted_Gitness/executions/<+pipeline.executionId>/security\",\n    \"payload\": {\n      \"data\": null,\n      \"kind\": \"\",\n      \"version\": \"1.0\"\n    },\n    \"started\": 0,\n    \"status\": \"success\",\n    \"summary\": \"BlackDuck and Snyk Gates\"\n    }'",
                        "shell": "Sh"
                      },
                      "type": "Run"
                    }
                  }
                ]
              },
              "platform": {
                "arch": "Amd64",
                "os": "Linux"
              },
              "runtime": {
                "spec": {},
                "type": "Cloud"
              },
              "sharedPaths": [
                "/var/run",
                "/root/.m2",
                "/opt/"
              ],
              "slsa_provenance": {
                "attestation": {
                  "spec": {
                    "password": "Cosign_Password",
                    "private_key": "Cosign_Private_Key"
                  },
                  "type": "cosign"
                },
                "enabled": true
              }
            },
            "strategy": {
              "parallelism": 2
            },
            "type": "CI"
          }
        },
        {
          "stage": {
            "description": "",
            "failureStrategies": [
              {
                "onFailure": {
                  "action": {
                    "type": "MarkAsSuccess"
                  },
                  "errors": [
                    "ApprovalRejection"
                  ]
                }
              }
            ],
            "identifier": "Dev_Cluster_Up",
            "name": "Dev Cluster Up",
            "spec": {
              "execution": {
                "steps": [
                  {
                    "step": {
                      "identifier": "init",
                      "name": "init",
                      "spec": {
                        "command": "init"
                      },
                      "timeout": "10m",
                      "type": "IACMTerraformPlugin"
                    }
                  },
                  {
                    "step": {
                      "identifier": "plan",
                      "name": "plan",
                      "spec": {
                        "command": "plan"
                      },
                      "timeout": "10m",
                      "type": "IACMTerraformPlugin"
                    }
                  },
                  {
                    "step": {
                      "identifier": "Wiz_IaC",
                      "name": "Wiz IaC",
                      "spec": {
                        "advanced": {
                          "log": {
                            "level": "info"
                          }
                        },
                        "auth": {
                          "access_id": "<+secrets.getValue(\"account.wiz_access_id\")>",
                          "access_token": "<+secrets.getValue(\"account.wiz_access_token\")>"
                        },
                        "config": "wiz-iac-templates",
                        "mode": "orchestration",
                        "target": {
                          "detection": "auto",
                          "type": "repository",
                          "workspace": "/harness/iacm-gke"
                        }
                      },
                      "type": "Wiz"
                    }
                  },
                  {
                    "step": {
                      "identifier": "IACM_Approval",
                      "name": "IACM Approval",
                      "spec": {
                        "autoApprove": true
                      },
                      "timeout": "1h",
                      "type": "IACMApproval"
                    }
                  },
                  {
                    "step": {
                      "identifier": "apply",
                      "name": "apply",
                      "spec": {
                        "command": "apply"
                      },
                      "timeout": "10m",
                      "type": "IACMTerraformPlugin"
                    }
                  }
                ]
              },
              "platform": {
                "arch": "Amd64",
                "os": "Linux"
              },
              "runtime": {
                "spec": {},
                "type": "Cloud"
              },
              "workspace": "potpdevgke"
            },
            "tags": {},
            "type": "IACM",
            "variables": [
              {
                "description": "",
                "name": "workspace",
                "required": false,
                "type": "String",
                "value": "potpdevgke"
              }
            ]
          }
        },
        {
          "stage": {
            "description": "",
            "failureStrategies": [
              {
                "onFailure": {
                  "action": {
                    "type": "StageRollback"
                  },
                  "errors": [
                    "AllErrors"
                  ]
                }
              }
            ],
            "identifier": "Deploy_to_Dev",
            "name": "Deploy to Dev",
            "spec": {
              "deploymentType": "Kubernetes",
              "environment": {
                "deployToAll": false,
                "environmentRef": "dev",
                "infrastructureDefinitions": [
                  {
                    "identifier": "potpdev"
                  }
                ]
              },
              "execution": {
                "rollbackSteps": [
                  {
                    "step": {
                      "identifier": "rollbackRolloutDeployment",
                      "name": "Rollback Rollout Deployment",
                      "spec": {},
                      "timeout": "10m",
                      "type": "K8sRollingRollback"
                    }
                  }
                ],
                "steps": [
                  {
                    "stepGroup": {
                      "delegateSelectors": [
                        "platform-delegate-with-tf"
                      ],
                      "failureStrategies": [
                        {
                          "onFailure": {
                            "action": {
                              "type": "MarkAsSuccess"
                            },
                            "errors": [
                              "AllErrors"
                            ]
                          }
                        }
                      ],
                      "identifier": "Terraform_Plan_and_Apply",
                      "name": "Terraform Plan and Apply",
                      "spec": {},
                      "steps": [
                        {
                          "parallel": [
                            {
                              "step": {
                                "failureStrategies": [],
                                "identifier": "TF_Plan_S3",
                                "name": "TF Plan AWS",
                                "spec": {
                                  "configuration": {
                                    "command": "Apply",
                                    "configFiles": {
                                      "store": {
                                        "spec": {
                                          "branch": "main",
                                          "connectorRef": "danf_jhttp_repo",
                                          "folderPath": "terraform/aws",
                                          "gitFetchType": "Branch",
                                          "repoName": "terraform_scripts"
                                        },
                                        "type": "Github"
                                      }
                                    },
                                    "secretManagerRef": "harnessSecretManager",
                                    "varFiles": [
                                      {
                                        "varFile": {
                                          "identifier": "terraform.tfvars",
                                          "spec": {
                                            "content": "aws_region = \"us-east-1\"\naccess_key = \"<+secrets.getValue(\"danfawsaccesskeyid\")>\"\nsecret_key = \"<+secrets.getValue(\"danfawssecretaccesskey\")>\"\nbucket_name = \"e2e-demo-<+pipeline.sequenceId>\""
                                          },
                                          "type": "Inline"
                                        }
                                      }
                                    ]
                                  },
                                  "delegateSelectors": [
                                    "platform-delegate-with-tf"
                                  ],
                                  "provisionerIdentifier": "e2eaws"
                                },
                                "timeout": "10m",
                                "type": "TerraformPlan"
                              }
                            },
                            {
                              "step": {
                                "failureStrategies": [],
                                "identifier": "TF_Plan_Blob",
                                "name": "TF Plan Az",
                                "spec": {
                                  "configuration": {
                                    "command": "Apply",
                                    "configFiles": {
                                      "store": {
                                        "spec": {
                                          "branch": "main",
                                          "connectorRef": "danf_jhttp_repo",
                                          "folderPath": "terraform/azure",
                                          "gitFetchType": "Branch",
                                          "repoName": "terraform_scripts"
                                        },
                                        "type": "Github"
                                      }
                                    },
                                    "secretManagerRef": "harnessSecretManager",
                                    "varFiles": [
                                      {
                                        "varFile": {
                                          "identifier": "terraform.tfvars",
                                          "spec": {
                                            "content": "tenant_id = \"<+secrets.getValue(\"danaztenantid\")>\"\nsubscription_id = \"<+secrets.getValue(\"danazsubscriptionid\")>\"\nclient_id = \"<+secrets.getValue(\"danazclientid\")>\"\nclient_secret = \"<+secrets.getValue(\"danazclientsecret\")>\""
                                          },
                                          "type": "Inline"
                                        }
                                      }
                                    ]
                                  },
                                  "delegateSelectors": [
                                    "platform-delegate-with-tf"
                                  ],
                                  "provisionerIdentifier": "e2eaz"
                                },
                                "timeout": "10m",
                                "type": "TerraformPlan"
                              }
                            }
                          ]
                        },
                        {
                          "parallel": [
                            {
                              "step": {
                                "failureStrategies": [],
                                "identifier": "TF_Apply_S3",
                                "name": "TF Apply AWS",
                                "spec": {
                                  "configuration": {
                                    "type": "InheritFromPlan"
                                  },
                                  "delegateSelectors": [
                                    "platform-delegate-with-tf"
                                  ],
                                  "provisionerIdentifier": "e2eaws"
                                },
                                "timeout": "10m",
                                "type": "TerraformApply",
                                "when": {
                                  "stageStatus": "Success"
                                }
                              }
                            },
                            {
                              "step": {
                                "failureStrategies": [],
                                "identifier": "TF_Apply_AzBlob",
                                "name": "TF Apply Az",
                                "spec": {
                                  "configuration": {
                                    "type": "InheritFromPlan"
                                  },
                                  "delegateSelectors": [
                                    "platform-delegate-with-tf"
                                  ],
                                  "provisionerIdentifier": "e2eaz"
                                },
                                "timeout": "10m",
                                "type": "TerraformApply"
                              }
                            }
                          ]
                        }
                      ],
                      "when": {
                        "condition": "<+codebase.sourceBranch>=~ \".*-patch.*\" || <+pipeline.variables.devonly> == \"false\"",
                        "stageStatus": "Success"
                      }
                    }
                  },
                  {
                    "parallel": [
                      {
                        "step": {
                          "failureStrategies": [],
                          "identifier": "Open_Jira_Ticket",
                          "name": "Jira - Create Ticket",
                          "spec": {
                            "connector": {
                              "accountIdentifier": "6_vVHzo9Qeu9fXvj-AcbCQ",
                              "description": "",
                              "identifier": "Harness_JIRA",
                              "name": "Harness JIRA",
                              "spec": {
                                "auth": {
                                  "spec": {
                                    "passwordRef": "account.Harness_JIRA",
                                    "username": "se-accounts@harness.io"
                                  },
                                  "type": "UsernamePassword"
                                },
                                "delegateSelectors": [],
                                "jiraUrl": "https://harness.atlassian.net",
                                "passwordRef": "account.Harness_JIRA",
                                "username": "se-accounts@harness.io"
                              },
                              "tags": {},
                              "type": "Jira"
                            },
                            "fields": [
                              {
                                "name": "Description",
                                "value": "Promote <+service.name> to production \\\\ Pipeline Name: <+pipeline.name> \\\\ Artifact: <+artifact.image> \\\\ Deployment URL: https://app.harness.io/ng/#/account/6_vVHzo9Qeu9fXvj-AcbCQ/cd/<+org.name>/default/projects/<+project.name>/pipelines/CD_Pipeline/executions/<+pipeline.executionId>/pipeline \\\\ Harness executionId: <+pipeline.executionId> \\\\ Harness sequenceId: <+pipeline.sequenceId> \\\\  PR requested by GH_User: <+pipeline.variables.ghusername>"
                              },
                              {
                                "name": "Summary",
                                "value": "Ticket to Track deployment"
                              }
                            ],
                            "issueType": "Story",
                            "projectKey": "HD"
                          },
                          "timeout": "1d",
                          "type": "JiraCreate",
                          "when": {
                            "condition": "<+codebase.sourceBranch>=~ \".*-patch.*\" || <+pipeline.variables.devonly> == \"false\"",
                            "stageStatus": "Success"
                          }
                        }
                      },
                      {
                        "step": {
                          "failureStrategies": [
                            {
                              "onFailure": {
                                "action": {
                                  "type": "Ignore"
                                },
                                "errors": [
                                  "AllErrors"
                                ]
                              }
                            }
                          ],
                          "identifier": "ServiceNow_Create_Ticket",
                          "name": "ServiceNow - Create Ticket",
                          "spec": {
                            "connector": {
                              "accountIdentifier": "6_vVHzo9Qeu9fXvj-AcbCQ",
                              "description": "",
                              "identifier": "ServiceNow",
                              "name": "ServiceNow Dev",
                              "spec": {
                                "auth": {
                                  "spec": {
                                    "passwordRef": "account.ServiceNow",
                                    "usernameRef": "account.servicenowuser"
                                  },
                                  "type": "UsernamePassword"
                                },
                                "delegateSelectors": [],
                                "passwordRef": "account.ServiceNow",
                                "serviceNowUrl": "https://ven03172.service-now.com/",
                                "usernameRef": "account.servicenowuser"
                              },
                              "tags": {},
                              "type": "ServiceNow"
                            },
                            "fields": [
                              {
                                "name": "description",
                                "value": "Promote <+service.name> to production \\\\ Pipeline Name: <+pipeline.name> \\\\ Service Name: <+pipeline.variables.serviceName> \\\\ Deployment URL: https://app.harness.io/ng/#/account/6_vVHzo9Qeu9fXvj-AcbCQ/cd/<+org.name>/default/projects/<+project.name>/pipelines/CD_Pipeline/executions/<+pipeline.executionId>/pipeline \\\\ Harness executionId: <+pipeline.executionId> \\\\ Harness sequenceId: <+pipeline.sequenceId> \\\\  PR requested by GH_User: <+pipeline.variables.ghusername>"
                              },
                              {
                                "name": "short_description",
                                "value": "Begin promotion of <+service.name> to production"
                              }
                            ],
                            "ticketType": "CHANGE_REQUEST",
                            "useServiceNowTemplate": false
                          },
                          "timeout": "1d",
                          "type": "ServiceNowCreate",
                          "when": {
                            "condition": "<+codebase.sourceBranch>=~ \".*-patch.*\" || <+pipeline.variables.devonly> == \"false\"",
                            "stageStatus": "Success"
                          }
                        }
                      }
                    ]
                  },
                  {
                    "step": {
                      "failureStrategies": [],
                      "identifier": "checkProvenance",
                      "name": "Check Provenance",
                      "spec": {
                        "environmentVariables": [],
                        "onDelegate": true,
                        "outputVariables": [],
                        "shell": "Bash",
                        "source": {
                          "spec": {
                            "script": "echo \"checking shas....\""
                          },
                          "type": "Inline"
                        }
                      },
                      "timeout": "10m",
                      "type": "ShellScript",
                      "when": {
                        "condition": "<+codebase.sourceBranch>=~ \".*-patch.*\" || <+pipeline.variables.devonly> == \"false\"",
                        "stageStatus": "Success"
                      }
                    }
                  },
                  {
                    "step": {
                      "failureStrategies": [],
                      "identifier": "rolloutDeployment",
                      "name": "Rollout Deployment",
                      "spec": {
                        "skipDryRun": false
                      },
                      "timeout": "10m",
                      "type": "K8sRollingDeploy",
                      "when": {
                        "stageStatus": "Success"
                      }
                    }
                  },
                  {
                    "parallel": [
                      {
                        "step": {
                          "failureStrategies": [],
                          "identifier": "Update_JIRA",
                          "name": "Update Jira",
                          "spec": {
                            "connector": {
                              "accountIdentifier": "6_vVHzo9Qeu9fXvj-AcbCQ",
                              "description": "",
                              "identifier": "Harness_JIRA",
                              "name": "Harness JIRA",
                              "spec": {
                                "auth": {
                                  "spec": {
                                    "passwordRef": "account.Harness_JIRA",
                                    "username": "se-accounts@harness.io"
                                  },
                                  "type": "UsernamePassword"
                                },
                                "delegateSelectors": [],
                                "jiraUrl": "https://harness.atlassian.net",
                                "passwordRef": "account.Harness_JIRA",
                                "username": "se-accounts@harness.io"
                              },
                              "tags": {},
                              "type": "Jira"
                            },
                            "fields": [
                              {
                                "name": "Comment",
                                "value": "Succesfully Passed \"CheckProvenance\""
                              }
                            ],
                            "issueKey": "<+pipeline.stages.Deploy_to_Dev.spec.execution.steps.Open_Jira_Ticket.issue.key>"
                          },
                          "timeout": "1d",
                          "type": "JiraUpdate",
                          "when": {
                            "condition": "<+codebase.sourceBranch>=~ \".*-patch.*\" || <+pipeline.variables.devonly> == \"false\"",
                            "stageStatus": "Success"
                          }
                        }
                      },
                      {
                        "step": {
                          "failureStrategies": [
                            {
                              "onFailure": {
                                "action": {
                                  "type": "Ignore"
                                },
                                "errors": [
                                  "AllErrors"
                                ]
                              }
                            }
                          ],
                          "identifier": "ServiceNow_Update_Ticket",
                          "name": "ServiceNow - Update Ticket",
                          "spec": {
                            "connector": {
                              "accountIdentifier": "6_vVHzo9Qeu9fXvj-AcbCQ",
                              "description": "",
                              "identifier": "ServiceNow",
                              "name": "ServiceNow Dev",
                              "spec": {
                                "auth": {
                                  "spec": {
                                    "passwordRef": "account.ServiceNow",
                                    "usernameRef": "account.servicenowuser"
                                  },
                                  "type": "UsernamePassword"
                                },
                                "delegateSelectors": [],
                                "passwordRef": "account.ServiceNow",
                                "serviceNowUrl": "https://ven03172.service-now.com/",
                                "usernameRef": "account.servicenowuser"
                              },
                              "tags": {},
                              "type": "ServiceNow"
                            },
                            "fields": [
                              {
                                "name": "description",
                                "value": "Promote <+service.name> to production \\\\ Pipeline Name: <+pipeline.name> \\\\ Service Name: <+pipeline.variables.serviceName> \\\\ Deployment URL: https://app.harness.io/ng/#/account/6_vVHzo9Qeu9fXvj-AcbCQ/cd/<+org.name>/default/projects/<+project.name>/pipelines/CD_Pipeline/executions/<+pipeline.executionId>/pipeline \\\\ Harness executionId: <+pipeline.executionId> \\\\ Harness sequenceId: <+pipeline.sequenceId> \\\\  PR requested by GH_User: <+pipeline.variables.ghusername>"
                              },
                              {
                                "name": "short_description",
                                "value": "Begin promotion of <+service.name> to production \\\\ Dev Deployment was successful (/)"
                              }
                            ],
                            "ticketNumber": "<+execution.steps.ServiceNow_Create_Ticket.ticket.ticketNumber>",
                            "ticketType": "CHANGE_REQUEST",
                            "useServiceNowTemplate": false
                          },
                          "timeout": "1d",
                          "type": "ServiceNowUpdate",
                          "when": {
                            "condition": "<+codebase.sourceBranch>=~ \".*-patch.*\" || <+pipeline.variables.devonly> == \"false\"",
                            "stageStatus": "Success"
                          }
                        }
                      },
                      {
                        "step": {
                          "failureStrategies": [
                            {
                              "onFailure": {
                                "action": {
                                  "type": "MarkAsSuccess"
                                },
                                "errors": [
                                  "AllErrors"
                                ]
                              }
                            }
                          ],
                          "identifier": "Access_to_Deployment",
                          "name": "Access to Deployment",
                          "spec": {
                            "environmentVariables": [],
                            "onDelegate": true,
                            "outputVariables": [
                              {
                                "name": "boutique_dev_url",
                                "type": "String",
                                "value": "frontend"
                              },
                              {
                                "name": "prometheus_url",
                                "type": "String",
                                "value": "grafana"
                              },
                              {
                                "name": "grafana_url",
                                "type": "String",
                                "value": "prom"
                              }
                            ],
                            "shell": "Bash",
                            "source": {
                              "spec": {
                                "script": "frontend=$(kubectl get service frontend-external -n boutique | awk '{print $4}' | xargs | awk '{print $2}')\ngrafana=$(kubectl get service grafana -n boutique | awk '{print $4}' | xargs | awk '{print $2}')\nprom=$(kubectl get service prometheus-k8s -n boutique | awk '{print $4}' | xargs | awk '{print $2}')\nfrontend=\"http://\"$frontend\ngrafana=\"http://\"$grafana\":3000\"\nprom=\"http://\"$prom\":9090\"\n\n\necho \"Boutique URL:\" $frontend\necho \"Grafana URL: \"$grafana\necho \"Prometheus URL: \"$prom\n"
                              },
                              "type": "Inline"
                            }
                          },
                          "timeout": "10m",
                          "type": "ShellScript"
                        }
                      }
                    ]
                  },
                  {
                    "step": {
                      "identifier": "CCM_AutoStopping_Rule",
                      "name": "CCM - AutoStopping Rule",
                      "spec": {
                        "filePaths": [
                          "k8s_manifest/autostoppingrule.yaml"
                        ],
                        "overrides": [],
                        "skipDryRun": false,
                        "skipRendering": false,
                        "skipSteadyStateCheck": false
                      },
                      "timeout": "10m",
                      "type": "K8sApply",
                      "when": {
                        "condition": "false",
                        "stageStatus": "All"
                      }
                    }
                  }
                ]
              },
              "infrastructure": {
                "allowSimultaneousDeployments": false,
                "environment": {
                  "accountIdentifier": "6_vVHzo9Qeu9fXvj-AcbCQ",
                  "color": "#0063F7",
                  "description": "",
                  "identifier": "dev",
                  "name": "dev",
                  "orgIdentifier": "default",
                  "projectIdentifier": "Power_of_the_Platform",
                  "tags": {},
                  "type": "PreProduction"
                },
                "infrastructureDefinition": {
                  "spec": {
                    "connector": {
                      "accountIdentifier": "6_vVHzo9Qeu9fXvj-AcbCQ",
                      "description": "",
                      "identifier": "potpk8s",
                      "name": "potp-k8s",
                      "orgIdentifier": "default",
                      "parentUniqueId": "Idv13rPxTFumR18arZbNuw",
                      "projectIdentifier": "Power_of_the_Platform",
                      "spec": {
                        "credential": {
                          "spec": null,
                          "type": "InheritFromDelegate"
                        },
                        "delegateSelectors": [
                          "potp-kubernetes-delegate"
                        ]
                      },
                      "tags": {},
                      "type": "K8sCluster",
                      "uniqueId": "dYdNqkd2TheBdSdCDi29oQ"
                    },
                    "namespace": "potp-dev",
                    "releaseName": "release-<+INFRA_KEY_SHORT_ID>"
                  },
                  "type": "KubernetesDirect"
                }
              },
              "service": {
                "service": {
                  "accountIdentifier": "6_vVHzo9Qeu9fXvj-AcbCQ",
                  "identifier": "Boutique_Frontend",
                  "name": "Boutique_Frontend",
                  "orgIdentifier": "default",
                  "projectIdentifier": "Power_of_the_Platform",
                  "tags": {}
                },
                "serviceInputs": {
                  "serviceDefinition": {
                    "spec": {
                      "artifacts": {
                        "primary": {
                          "primaryArtifactRef": "<+input>",
                          "sources": "<+input>"
                        }
                      }
                    },
                    "type": "Kubernetes"
                  }
                }
              },
              "sloPolicy": {
                "statusOfMonitoredService": "NOT_CONFIGURED"
              }
            },
            "tags": {},
            "type": "Deployment"
          }
        },
        {
          "stage": {
            "description": "",
            "failureStrategies": [
              {
                "onFailure": {
                  "action": {
                    "type": "StageRollback"
                  },
                  "errors": [
                    "AllErrors"
                  ]
                }
              }
            ],
            "identifier": "Deploy_to_QA",
            "name": "Deploy to QA",
            "spec": {
              "deploymentType": "Kubernetes",
              "environment": {
                "deployToAll": false,
                "environmentRef": "qa",
                "infrastructureDefinitions": [
                  {
                    "identifier": "potpqa"
                  }
                ]
              },
              "execution": {
                "rollbackSteps": [
                  {
                    "step": {
                      "identifier": "rollbackBgSwapServices",
                      "name": "Swap primary with stage service",
                      "spec": {
                        "skipDryRun": false
                      },
                      "timeout": "10m",
                      "type": "K8sBGSwapServices"
                    }
                  }
                ],
                "steps": [
                  {
                    "step": {
                      "identifier": "Update_JIRA",
                      "name": "Update Jira",
                      "spec": {
                        "connector": {
                          "accountIdentifier": "6_vVHzo9Qeu9fXvj-AcbCQ",
                          "description": "",
                          "identifier": "Harness_JIRA",
                          "name": "Harness JIRA",
                          "spec": {
                            "auth": {
                              "spec": {
                                "passwordRef": "account.Harness_JIRA",
                                "username": "se-accounts@harness.io"
                              },
                              "type": "UsernamePassword"
                            },
                            "delegateSelectors": [],
                            "jiraUrl": "https://harness.atlassian.net",
                            "passwordRef": "account.Harness_JIRA",
                            "username": "se-accounts@harness.io"
                          },
                          "tags": {},
                          "type": "Jira"
                        },
                        "fields": [],
                        "issueKey": "<+pipeline.stages.Deploy_to_Dev.spec.execution.steps.Open_Jira_Ticket.issue.key>"
                      },
                      "timeout": "1d",
                      "type": "JiraUpdate",
                      "when": {
                        "stageStatus": "Success"
                      }
                    }
                  },
                  {
                    "stepGroup": {
                      "identifier": "BlueGreen_Deployment",
                      "name": "Blue-Green Deployment",
                      "steps": [
                        {
                          "step": {
                            "identifier": "stageDeployment",
                            "name": "Stage Deployment",
                            "spec": {
                              "pruningEnabled": false,
                              "skipDryRun": false
                            },
                            "timeout": "10m",
                            "type": "K8sBlueGreenDeploy"
                          }
                        },
                        {
                          "parallel": [
                            {
                              "step": {
                                "identifier": "Regression_Tests",
                                "name": "Regression Tests",
                                "spec": {
                                  "environmentVariables": [],
                                  "executionTarget": {},
                                  "onDelegate": true,
                                  "outputVariables": [],
                                  "shell": "Bash",
                                  "source": {
                                    "spec": {
                                      "script": "echo \"Regression Tests\""
                                    },
                                    "type": "Inline"
                                  }
                                },
                                "timeout": "10m",
                                "type": "ShellScript"
                              }
                            },
                            {
                              "step": {
                                "identifier": "JMeter",
                                "name": "JMeter",
                                "spec": {
                                  "environmentVariables": [],
                                  "executionTarget": {},
                                  "onDelegate": true,
                                  "outputVariables": [],
                                  "shell": "Bash",
                                  "source": {
                                    "spec": {
                                      "script": "echo \"JMeter\""
                                    },
                                    "type": "Inline"
                                  }
                                },
                                "timeout": "10m",
                                "type": "ShellScript"
                              }
                            },
                            {
                              "step": {
                                "identifier": "Selenium",
                                "name": "Selenium",
                                "spec": {
                                  "environmentVariables": [],
                                  "executionTarget": {},
                                  "onDelegate": true,
                                  "outputVariables": [],
                                  "shell": "Bash",
                                  "source": {
                                    "spec": {
                                      "script": "echo \"Selenium\""
                                    },
                                    "type": "Inline"
                                  }
                                },
                                "timeout": "10m",
                                "type": "ShellScript"
                              }
                            }
                          ]
                        },
                        {
                          "step": {
                            "identifier": "bgSwapServices",
                            "name": "Swap primary with stage service",
                            "spec": {
                              "skipDryRun": false
                            },
                            "timeout": "10m",
                            "type": "K8sBGSwapServices"
                          }
                        }
                      ]
                    }
                  },
                  {
                    "parallel": [
                      {
                        "step": {
                          "failureStrategies": [
                            {
                              "onFailure": {
                                "action": {
                                  "type": "MarkAsSuccess"
                                },
                                "errors": [
                                  "AllErrors"
                                ]
                              }
                            }
                          ],
                          "identifier": "Cart_Delete",
                          "name": "Chaos - CartService Delete",
                          "spec": {
                            "expectedResilienceScore": 80,
                            "experimentRef": "4f4f40e9-7214-4d14-a2b6-5d335e87bfa9"
                          },
                          "type": "Chaos",
                          "when": {
                            "stageStatus": "Success"
                          }
                        }
                      },
                      {
                        "step": {
                          "failureStrategies": [
                            {
                              "onFailure": {
                                "action": {
                                  "type": "MarkAsSuccess"
                                },
                                "errors": [
                                  "AllErrors"
                                ]
                              }
                            }
                          ],
                          "identifier": "Access_to_Deployment",
                          "name": "Access to Deployment",
                          "spec": {
                            "environmentVariables": [],
                            "onDelegate": true,
                            "outputVariables": [
                              {
                                "name": "boutique_qa_url",
                                "type": "String",
                                "value": "frontend"
                              },
                              {
                                "name": "prometheus_url",
                                "type": "String",
                                "value": "prom"
                              },
                              {
                                "name": "grafana_url",
                                "type": "String",
                                "value": "grafana"
                              }
                            ],
                            "shell": "Bash",
                            "source": {
                              "spec": {
                                "script": "frontend=$(kubectl get service frontend-external -n boutique-qa | awk '{print $4}' | xargs | awk '{print $2}')\ngrafana=$(kubectl get service grafana -n boutique-qa | awk '{print $4}' | xargs | awk '{print $2}')\nprom=$(kubectl get service prometheus-k8s -n boutique-qa | awk '{print $4}' | xargs | awk '{print $2}')\nfrontend=\"http://\"$frontend\ngrafana=\"http://\"$grafana\":3000\"\nprom=\"http://\"$prom\":9090\"\n\n\necho \"Boutique URL:\" $frontend\necho \"Grafana URL: \"$grafana\necho \"Prometheus URL: \"$prom\n"
                              },
                              "type": "Inline"
                            }
                          },
                          "timeout": "10m",
                          "type": "ShellScript"
                        }
                      }
                    ]
                  },
                  {
                    "parallel": [
                      {
                        "step": {
                          "failureStrategies": [],
                          "identifier": "CCM_AutoStopping_Rule",
                          "name": "CCM AutoStopping Rule",
                          "spec": {
                            "filePaths": [
                              "k8s_manifest/autostoppingrule.yaml"
                            ],
                            "overrides": [],
                            "skipDryRun": false,
                            "skipSteadyStateCheck": false
                          },
                          "timeout": "10m",
                          "type": "K8sApply",
                          "when": {
                            "stageStatus": "Failure"
                          }
                        }
                      },
                      {
                        "step": {
                          "identifier": "Update_Jira",
                          "name": "Update Jira",
                          "spec": {
                            "connector": {
                              "accountIdentifier": "6_vVHzo9Qeu9fXvj-AcbCQ",
                              "description": "",
                              "identifier": "Harness_JIRA",
                              "name": "Harness JIRA",
                              "spec": {
                                "auth": {
                                  "spec": {
                                    "passwordRef": "account.Harness_JIRA",
                                    "username": "se-accounts@harness.io"
                                  },
                                  "type": "UsernamePassword"
                                },
                                "delegateSelectors": [],
                                "jiraUrl": "https://harness.atlassian.net",
                                "passwordRef": "account.Harness_JIRA",
                                "username": "se-accounts@harness.io"
                              },
                              "tags": {},
                              "type": "Jira"
                            },
                            "fields": [],
                            "issueKey": "<+pipeline.stages.Deploy_to_Dev.spec.execution.steps.Open_Jira_Ticket.issue.key>"
                          },
                          "timeout": "1d",
                          "type": "JiraUpdate",
                          "when": {
                            "stageStatus": "Success"
                          }
                        }
                      }
                    ]
                  }
                ]
              },
              "infrastructure": {
                "allowSimultaneousDeployments": false,
                "environment": {
                  "accountIdentifier": "6_vVHzo9Qeu9fXvj-AcbCQ",
                  "color": "#0063F7",
                  "description": "",
                  "identifier": "qa",
                  "name": "qa",
                  "orgIdentifier": "default",
                  "projectIdentifier": "Power_of_the_Platform",
                  "tags": {},
                  "type": "PreProduction"
                },
                "infrastructureDefinition": {
                  "spec": {
                    "connector": {
                      "accountIdentifier": "6_vVHzo9Qeu9fXvj-AcbCQ",
                      "description": "",
                      "identifier": "potpk8s",
                      "name": "potp-k8s",
                      "orgIdentifier": "default",
                      "parentUniqueId": "Idv13rPxTFumR18arZbNuw",
                      "projectIdentifier": "Power_of_the_Platform",
                      "spec": {
                        "credential": {
                          "spec": null,
                          "type": "InheritFromDelegate"
                        },
                        "delegateSelectors": [
                          "potp-kubernetes-delegate"
                        ]
                      },
                      "tags": {},
                      "type": "K8sCluster",
                      "uniqueId": "dYdNqkd2TheBdSdCDi29oQ"
                    },
                    "namespace": "potp-qa",
                    "releaseName": "release-<+INFRA_KEY_SHORT_ID>"
                  },
                  "type": "KubernetesDirect"
                }
              },
              "service": {
                "service": {
                  "accountIdentifier": "6_vVHzo9Qeu9fXvj-AcbCQ",
                  "identifier": "Boutique_Frontend",
                  "name": "Boutique_Frontend",
                  "orgIdentifier": "default",
                  "projectIdentifier": "Power_of_the_Platform",
                  "tags": {}
                },
                "serviceInputs": {
                  "serviceDefinition": {
                    "spec": {
                      "artifacts": {
                        "primary": {
                          "primaryArtifactRef": "<+input>",
                          "sources": "<+input>"
                        }
                      }
                    },
                    "type": "Kubernetes"
                  }
                }
              },
              "sloPolicy": {
                "statusOfMonitoredService": "NOT_CONFIGURED"
              }
            },
            "tags": {},
            "type": "Deployment",
            "when": {
              "condition": "<+codebase.sourceBranch>=~ \".*-patch.*\" || <+pipeline.variables.devonly> == \"false\"",
              "pipelineStatus": "Success"
            }
          }
        },
        {
          "stage": {
            "description": "",
            "failureStrategies": [
              {
                "onFailure": {
                  "action": {
                    "type": "MarkAsSuccess"
                  },
                  "errors": [
                    "AllErrors"
                  ]
                }
              }
            ],
            "identifier": "Approval",
            "name": "Approval",
            "spec": {
              "execution": {
                "steps": [
                  {
                    "step": {
                      "failureStrategies": [
                        {
                          "onFailure": {
                            "action": {
                              "type": "Ignore"
                            },
                            "errors": [
                              "Timeout"
                            ]
                          }
                        }
                      ],
                      "identifier": "jiraApproval",
                      "name": "Jira Approval",
                      "spec": {
                        "approvalCriteria": {
                          "spec": {
                            "conditions": [
                              {
                                "key": "Status",
                                "operator": "equals",
                                "value": "Approved"
                              }
                            ],
                            "matchAnyCondition": true
                          },
                          "type": "KeyValues"
                        },
                        "connector": {
                          "accountIdentifier": "6_vVHzo9Qeu9fXvj-AcbCQ",
                          "description": "",
                          "identifier": "Harness_JIRA",
                          "name": "Harness JIRA",
                          "spec": {
                            "auth": {
                              "spec": {
                                "passwordRef": "account.Harness_JIRA",
                                "username": "se-accounts@harness.io"
                              },
                              "type": "UsernamePassword"
                            },
                            "delegateSelectors": [],
                            "jiraUrl": "https://harness.atlassian.net",
                            "passwordRef": "account.Harness_JIRA",
                            "username": "se-accounts@harness.io"
                          },
                          "tags": {},
                          "type": "Jira"
                        },
                        "issueKey": "<+pipeline.stages.Deploy_to_Dev.spec.execution.steps.Open_Jira_Ticket.issue.key>",
                        "issueType": "Story",
                        "projectKey": "HD",
                        "rejectionCriteria": {
                          "spec": {
                            "conditions": [],
                            "matchAnyCondition": true
                          },
                          "type": "KeyValues"
                        }
                      },
                      "timeout": "4h",
                      "type": "JiraApproval"
                    }
                  },
                  {
                    "step": {
                      "identifier": "ServiceNow_Approval",
                      "name": "ServiceNow Approval",
                      "spec": {
                        "approvalCriteria": {
                          "spec": {
                            "conditions": [
                              {
                                "key": "state",
                                "operator": "equals",
                                "value": "Approve"
                              }
                            ],
                            "matchAnyCondition": true
                          },
                          "type": "KeyValues"
                        },
                        "changeWindow": {
                          "endField": "end_date",
                          "startField": "work_start"
                        },
                        "connector": {
                          "accountIdentifier": "6_vVHzo9Qeu9fXvj-AcbCQ",
                          "description": "",
                          "identifier": "ServiceNow",
                          "name": "ServiceNow Dev",
                          "spec": {
                            "auth": {
                              "spec": {
                                "passwordRef": "account.ServiceNow",
                                "usernameRef": "account.servicenowuser"
                              },
                              "type": "UsernamePassword"
                            },
                            "delegateSelectors": [],
                            "passwordRef": "account.ServiceNow",
                            "serviceNowUrl": "https://ven03172.service-now.com/",
                            "usernameRef": "account.servicenowuser"
                          },
                          "tags": {},
                          "type": "ServiceNow"
                        },
                        "rejectionCriteria": {
                          "spec": {
                            "conditions": [],
                            "matchAnyCondition": true
                          },
                          "type": "KeyValues"
                        },
                        "retryInterval": "1m",
                        "ticketNumber": "<+pipeline.stages.Deploy_to_Dev.spec.execution.steps.Open_Jira_Ticket.issue.key>",
                        "ticketType": "CHANGE_REQUEST"
                      },
                      "timeout": "1d",
                      "type": "ServiceNowApproval",
                      "when": {
                        "condition": "<+pipeline.stages.Approval.spec.execution.steps.jiraApproval.spec.approvalCriteria.criteriaSpec.conditions[0].value>==\"rejected\"",
                        "stageStatus": "Failure"
                      }
                    }
                  }
                ]
              },
              "serviceDependencies": []
            },
            "tags": {},
            "type": "Approval",
            "when": {
              "condition": "<+codebase.sourceBranch>=~ \".*-patch.*\" || <+pipeline.variables.devonly> == \"false\"",
              "pipelineStatus": "Success"
            }
          }
        },
        {
          "stage": {
            "description": "Deploy to Production K8S Cluster",
            "failureStrategies": [
              {
                "onFailure": {
                  "action": {
                    "type": "StageRollback"
                  },
                  "errors": [
                    "AllErrors"
                  ]
                }
              }
            ],
            "identifier": "Deploy_to_Prod",
            "name": "Deploy to Prod",
            "spec": {
              "deploymentType": "Kubernetes",
              "environment": {
                "deployToAll": false,
                "environmentRef": "prod",
                "infrastructureDefinitions": [
                  {
                    "identifier": "boutiqueprod"
                  }
                ]
              },
              "execution": {
                "rollbackSteps": [
                  {
                    "step": {
                      "identifier": "rollbackCanaryDelete",
                      "name": "Canary Delete",
                      "spec": {},
                      "timeout": "10m",
                      "type": "K8sCanaryDelete"
                    }
                  },
                  {
                    "step": {
                      "identifier": "rollingRollback",
                      "name": "Rolling Rollback",
                      "spec": {},
                      "timeout": "10m",
                      "type": "K8sRollingRollback"
                    }
                  },
                  {
                    "step": {
                      "identifier": "Update_Jira_Close",
                      "name": "Update Jira",
                      "spec": {
                        "connector": {
                          "accountIdentifier": "6_vVHzo9Qeu9fXvj-AcbCQ",
                          "description": "",
                          "identifier": "Harness_JIRA",
                          "name": "Harness JIRA",
                          "spec": {
                            "auth": {
                              "spec": {
                                "passwordRef": "account.Harness_JIRA",
                                "username": "se-accounts@harness.io"
                              },
                              "type": "UsernamePassword"
                            },
                            "delegateSelectors": [],
                            "jiraUrl": "https://harness.atlassian.net",
                            "passwordRef": "account.Harness_JIRA",
                            "username": "se-accounts@harness.io"
                          },
                          "tags": {},
                          "type": "Jira"
                        },
                        "fields": [],
                        "issueKey": "<+pipeline.stages.Deploy_to_Dev.spec.execution.steps.Open_Jira_Ticket.issue.key>"
                      },
                      "timeout": "1d",
                      "type": "JiraUpdate"
                    }
                  },
                  {
                    "stepGroup": {
                      "failureStrategies": [
                        {
                          "onFailure": {
                            "action": {
                              "type": "MarkAsSuccess"
                            },
                            "errors": [
                              "AllErrors"
                            ]
                          }
                        }
                      ],
                      "identifier": "TF_CleanUp",
                      "name": "Terraform CleanUp",
                      "steps": [
                        {
                          "parallel": [
                            {
                              "step": {
                                "identifier": "Tf_Destroy_S3",
                                "name": "TF Destroy AWS",
                                "spec": {
                                  "configuration": {
                                    "type": "InheritFromApply"
                                  },
                                  "provisionerIdentifier": "e2eaws"
                                },
                                "timeout": "10m",
                                "type": "TerraformDestroy"
                              }
                            },
                            {
                              "step": {
                                "identifier": "TF_Destroy_AzBlob",
                                "name": "TF Destroy Az",
                                "spec": {
                                  "configuration": {
                                    "type": "InheritFromApply"
                                  },
                                  "provisionerIdentifier": "e2eaz"
                                },
                                "timeout": "10m",
                                "type": "TerraformDestroy"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  }
                ],
                "steps": [
                  {
                    "step": {
                      "failureStrategies": [
                        {
                          "onFailure": {
                            "action": {
                              "type": "Ignore"
                            },
                            "errors": [
                              "AllErrors"
                            ]
                          }
                        }
                      ],
                      "identifier": "Critical_DAST_CVEs_Check",
                      "name": "Risk Profile OPA - New Criticals",
                      "spec": {
                        "policySets": [
                          "No_New_Critical_Vulnerabilities"
                        ],
                        "policySpec": {
                          "payload": "{\"SNYK_OSS_NEWCRITICAL\": pipeline.stages.Build_Test_Push.spec.execution.steps.SCA.steps.SnykSCA.output.outputVariables.CRITICAL>,\n\"OWASP_OSS_NEWCRITICAL\": pipeline.stages.Build_Test_Push.spec.execution.steps.SCA.steps.OWASP.output.outputVariables.CRITICAL>,\n\"SNYK_SAST_NEWCRITICAL\": pipeline.stages.Build_Test_Push.spec.execution.steps.SAST.steps.Snyk.output.outputVariables.CRITICAL>,\n\"SQ_SAST_NEWCRITICAL\": pipeline.stages.Build_Test_Push.spec.execution.steps.SAST.steps.SonarQube_SAST.output.outputVariables.CRITICAL>,\n\"XRAY_IMAGE_NEWCRITICAL\": pipeline.stages.Build_Test_Push.spec.execution.steps.Image_Scan.steps.JFrog_Xray.output.outputVariables.CRITICAL>,\n\"AQUA_IMAGE_NEWCRITICAL\": pipeline.stages.Build_Test_Push.spec.execution.steps.Image_Scan.steps.Aqua_Trivy.output.outputVariables.CRITICAL>}"
                        },
                        "type": "Custom"
                      },
                      "timeout": "10m",
                      "type": "Policy"
                    }
                  },
                  {
                    "step": {
                      "identifier": "Update_JIRA",
                      "name": "Update Jira ",
                      "spec": {
                        "connector": {
                          "accountIdentifier": "6_vVHzo9Qeu9fXvj-AcbCQ",
                          "description": "",
                          "identifier": "Harness_JIRA",
                          "name": "Harness JIRA",
                          "spec": {
                            "auth": {
                              "spec": {
                                "passwordRef": "account.Harness_JIRA",
                                "username": "se-accounts@harness.io"
                              },
                              "type": "UsernamePassword"
                            },
                            "delegateSelectors": [],
                            "jiraUrl": "https://harness.atlassian.net",
                            "passwordRef": "account.Harness_JIRA",
                            "username": "se-accounts@harness.io"
                          },
                          "tags": {},
                          "type": "Jira"
                        },
                        "fields": [],
                        "issueKey": "<+pipeline.stages.Deploy_to_Dev.spec.execution.steps.Open_Jira_Ticket.issue.key>"
                      },
                      "timeout": "1d",
                      "type": "JiraUpdate",
                      "when": {
                        "stageStatus": "Success"
                      }
                    }
                  },
                  {
                    "stepGroup": {
                      "identifier": "canaryDepoyment",
                      "name": "Canary Deployment",
                      "rollbackSteps": [
                        {
                          "step": {
                            "identifier": "rollbackCanaryDelete",
                            "name": "Canary Delete",
                            "spec": {},
                            "timeout": "10m",
                            "type": "K8sCanaryDelete"
                          }
                        }
                      ],
                      "steps": [
                        {
                          "step": {
                            "identifier": "canaryDeployment",
                            "name": "Canary Deployment",
                            "spec": {
                              "instanceSelection": {
                                "spec": {
                                  "percentage": 5
                                },
                                "type": "Percentage"
                              },
                              "skipDryRun": false
                            },
                            "timeout": "10m",
                            "type": "K8sCanaryDeploy"
                          }
                        },
                        {
                          "parallel": [
                            {
                              "step": {
                                "failureStrategies": [
                                  {
                                    "onFailure": {
                                      "action": {
                                        "spec": {
                                          "onTimeout": {
                                            "action": {
                                              "type": "StageRollback"
                                            }
                                          },
                                          "timeout": "2h"
                                        },
                                        "type": "ManualIntervention"
                                      },
                                      "errors": [
                                        "Verification"
                                      ]
                                    }
                                  },
                                  {
                                    "onFailure": {
                                      "action": {
                                        "spec": {
                                          "onTimeout": {
                                            "action": {
                                              "type": "Ignore"
                                            }
                                          },
                                          "timeout": "2h"
                                        },
                                        "type": "ManualIntervention"
                                      },
                                      "errors": [
                                        "Unknown"
                                      ]
                                    }
                                  }
                                ],
                                "identifier": "cv_demo",
                                "name": "Continuous Verificaiton",
                                "spec": {
                                  "isMultiServicesOrEnvs": false,
                                  "monitoredService": {
                                    "spec": {},
                                    "type": "Default"
                                  },
                                  "spec": {
                                    "duration": "5m",
                                    "sensitivity": "HIGH"
                                  },
                                  "type": "Rolling"
                                },
                                "timeout": "2h",
                                "type": "Verify"
                              }
                            },
                            {
                              "step": {
                                "identifier": "Postman_HTTP_Check",
                                "name": "Postman HTTP Check",
                                "spec": {
                                  "headers": [],
                                  "method": "GET",
                                  "outputVariables": [],
                                  "url": "https://harness.io"
                                },
                                "timeout": "10s",
                                "type": "Http"
                              }
                            },
                            {
                              "step": {
                                "failureStrategies": [
                                  {
                                    "onFailure": {
                                      "action": {
                                        "type": "Ignore"
                                      },
                                      "errors": [
                                        "AllErrors"
                                      ]
                                    }
                                  }
                                ],
                                "identifier": "Chaos_Pod_Delete",
                                "name": "Chaos - CPU Hog",
                                "spec": {
                                  "expectedResilienceScore": 50,
                                  "experimentRef": "6846a54d-3d22-48aa-a88b-d30f83af73d3"
                                },
                                "type": "Chaos",
                                "when": {
                                  "stageStatus": "Success"
                                }
                              }
                            },
                            {
                              "step": {
                                "identifier": "Access_to_Deployment",
                                "name": "Access to Deployment",
                                "spec": {
                                  "environmentVariables": [],
                                  "onDelegate": true,
                                  "outputVariables": [
                                    {
                                      "name": "boutique_prod_url",
                                      "type": "String",
                                      "value": "frontend"
                                    },
                                    {
                                      "name": "prometheus_url",
                                      "type": "String",
                                      "value": "prom"
                                    },
                                    {
                                      "name": "grafana_url",
                                      "type": "String",
                                      "value": "grafana"
                                    }
                                  ],
                                  "shell": "Bash",
                                  "source": {
                                    "spec": {
                                      "script": "frontend=$(kubectl get service frontend-external -n boutique-prod | awk '{print $4}' | xargs | awk '{print $2}')\ngrafana=$(kubectl get service grafana -n boutique | awk '{print $4}' | xargs | awk '{print $2}')\nprom=$(kubectl get service prometheus-k8s -n boutique | awk '{print $4}' | xargs | awk '{print $2}')\nfrontend=\"http://\"$frontend\ngrafana=\"http://\"$grafana\":3000\"\nprom=\"http://\"$prom\":9090\"\n\n\necho \"Boutique URL:\" $frontend\necho \"Grafana URL: \"$grafana\necho \"Prometheus URL: \"$prom\n"
                                    },
                                    "type": "Inline"
                                  }
                                },
                                "timeout": "10m",
                                "type": "ShellScript"
                              }
                            }
                          ]
                        },
                        {
                          "step": {
                            "failureStrategies": [],
                            "identifier": "canaryDelete",
                            "name": "Canary Delete",
                            "spec": {
                              "skipDryRun": false
                            },
                            "timeout": "10m",
                            "type": "K8sCanaryDelete",
                            "when": {
                              "stageStatus": "All"
                            }
                          }
                        }
                      ]
                    }
                  },
                  {
                    "stepGroup": {
                      "identifier": "primaryDepoyment",
                      "name": "Primary Deployment",
                      "rollbackSteps": [
                        {
                          "step": {
                            "identifier": "rollingRollback",
                            "name": "Rolling Rollback",
                            "spec": {},
                            "timeout": "10m",
                            "type": "K8sRollingRollback"
                          }
                        }
                      ],
                      "steps": [
                        {
                          "step": {
                            "failureStrategies": [
                              {
                                "onFailure": {
                                  "action": {
                                    "type": "MarkAsSuccess"
                                  },
                                  "errors": [
                                    "AllErrors"
                                  ]
                                }
                              }
                            ],
                            "identifier": "rollingDeployment",
                            "name": "Rolling Deployment",
                            "spec": {
                              "skipDryRun": false
                            },
                            "timeout": "10m",
                            "type": "K8sRollingDeploy"
                          }
                        }
                      ]
                    }
                  }
                ]
              },
              "infrastructure": {
                "allowSimultaneousDeployments": false,
                "environment": {
                  "accountIdentifier": "6_vVHzo9Qeu9fXvj-AcbCQ",
                  "color": "#0063F7",
                  "description": "",
                  "identifier": "prod",
                  "name": "prod",
                  "orgIdentifier": "default",
                  "projectIdentifier": "Power_of_the_Platform",
                  "tags": {},
                  "type": "PreProduction"
                },
                "infrastructureDefinition": {
                  "spec": {
                    "connector": {
                      "accountIdentifier": "6_vVHzo9Qeu9fXvj-AcbCQ",
                      "description": "",
                      "identifier": "platformdemok8s",
                      "name": "platform-demo-k8s",
                      "orgIdentifier": "default",
                      "parentUniqueId": "Idv13rPxTFumR18arZbNuw",
                      "projectIdentifier": "Power_of_the_Platform",
                      "spec": {
                        "credential": {
                          "spec": null,
                          "type": "InheritFromDelegate"
                        },
                        "delegateSelectors": [
                          "platform"
                        ]
                      },
                      "tags": {},
                      "type": "K8sCluster",
                      "uniqueId": "wIU4nzV5SSqu8umN-59A-Q"
                    },
                    "namespace": "boutique-prod",
                    "releaseName": "release-<+INFRA_KEY_SHORT_ID>"
                  },
                  "type": "KubernetesDirect"
                }
              },
              "service": {
                "service": {
                  "accountIdentifier": "6_vVHzo9Qeu9fXvj-AcbCQ",
                  "identifier": "Boutique_Frontend",
                  "name": "Boutique_Frontend",
                  "orgIdentifier": "default",
                  "projectIdentifier": "Power_of_the_Platform",
                  "tags": {}
                },
                "serviceInputs": {
                  "serviceDefinition": {
                    "spec": {
                      "artifacts": {
                        "primary": {
                          "primaryArtifactRef": "<+input>",
                          "sources": "<+input>"
                        }
                      }
                    },
                    "type": "Kubernetes"
                  }
                }
              },
              "sloPolicy": {
                "statusOfMonitoredService": "NOT_CONFIGURED"
              }
            },
            "tags": {},
            "type": "Deployment",
            "when": {
              "condition": "<+codebase.sourceBranch>=~ \".*-patch.*\" || <+pipeline.variables.devonly> == \"false\"",
              "pipelineStatus": "Success"
            }
          }
        }
      ],
      "tags": {},
      "variables": [
        {
          "default": "",
          "name": "devonly",
          "type": "String",
          "value": "<+input>.allowedValues(false,true)"
        }
      ]
    },
    "user": null
  }