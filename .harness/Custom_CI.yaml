pipeline:
  name: Custom CI
  identifier: Custom_CI
  projectIdentifier: SKOActon
  orgIdentifier: default
  tags: {}
  stages:
    - stage:
        name: Custom CI Attempt
        identifier: Custom_CI_Attempt
        description: |-
          A sample stage that clones a repo, runs simple actions on the content, then throws that repo away so this step will continue to work consistently.
          Important to consider:
          - You should select a delegate for in the stage's "Advanced" section so the selected delegate remains consistent through the run
          - This is limited to only what the delegate can do so you'll need to use the INIT_SCRIPT or a custom image to ensure it has all the tools needed to conduct the required task.
          - Modify the stage variables below to the git repo/credentials you want to use, or make them runtime variables or trigger variables for webhook/trigger workloads.
        type: Custom
        spec:
          execution:
            steps:
              - step:
                  type: ShellScript
                  name: Git Clone
                  identifier: Git_Clone
                  spec:
                    shell: Bash
                    executionTarget: {}
                    source:
                      type: Inline
                      spec:
                        script: |-
                          # Replace NicGHPAT with your actual GH PAT
                          # This will still pass if the clone fails because the repo still exists
                          git clone https://<+stage.variables.gh_PAT>:@github.com/<+stage.variables.repo_name> -b <+trigger.payload.pull_request.head.ref> || true
                    environmentVariables: []
                    outputVariables: []
                  timeout: 10m
              - step:
                  type: ShellScript
                  name: List Repo Contents
                  identifier: List_Repo_Contents
                  spec:
                    shell: Bash
                    executionTarget: {}
                    source:
                      type: Inline
                      spec:
                        script: |-
                          # An example to represent working with the repo contents
                          ls <+trigger.payload.repository.name>
                    environmentVariables: []
                    outputVariables: []
                  timeout: 10m
              - step:
                  type: ShellScript
                  name: Throwaway Repo
                  identifier: Throwaway_Repo
                  spec:
                    shell: Bash
                    executionTarget: {}
                    source:
                      type: Inline
                      spec:
                        script: |-
                          # Be very careful with this!
                          rm -Rf <+trigger.payload.repository.name>
                    environmentVariables: []
                    outputVariables: []
                  timeout: 10m
        tags: {}
        delegateSelectors:
          - se-sandbox-delegate
        variables:
          - name: repo_name
            type: String
            description: ""
            required: true
            value: <+trigger.payload.pull_request.head.repo.full_name>
          - name: gh_PAT
            type: String
            description: ""
            required: true
            value: <+secrets.getValue("NicGHPAT")>
  properties:
    ci:
      codebase:
        connectorRef: Nic_Github
        repoName: tuffacton/sample-private
        build: <+input>
        sparseCheckout: []
